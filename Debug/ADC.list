
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007388  08007388  00017388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800778c  0800778c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007794  08007794  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800779c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001dc  08007978  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08007978  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f45b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e4  00000000  00000000  0002f667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00031850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018718  00000000  00000000  00033348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002a  00000000  00000000  0004ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae60  00000000  00000000  0005ba8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f68ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  000f693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007370 	.word	0x08007370

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007370 	.word	0x08007370

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f000 fc73 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f889 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 f993 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed2:	f000 f971 	bl	80011b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed6:	f000 f8e3 	bl	80010a0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f943 	bl	8001164 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000ede:	483a      	ldr	r0, [pc, #232]	; (8000fc8 <main+0x108>)
 8000ee0:	f000 fd10 	bl	8001904 <HAL_ADC_Start>
	sprintf(msg,"%hu\r\n",value_adc);
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	volts = ((float)value_adc)*330/4096;
	sprintf(msg,"%hu\r\n", (uint16_t)volts);
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);*/
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 2);
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	4939      	ldr	r1, [pc, #228]	; (8000fcc <main+0x10c>)
 8000ee8:	4837      	ldr	r0, [pc, #220]	; (8000fc8 <main+0x108>)
 8000eea:	f000 fdbf 	bl	8001a6c <HAL_ADC_Start_DMA>
	sprintf(msg,"%hu\r\n", adc[0]);
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <main+0x10c>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4936      	ldr	r1, [pc, #216]	; (8000fd0 <main+0x110>)
 8000ef6:	4837      	ldr	r0, [pc, #220]	; (8000fd4 <main+0x114>)
 8000ef8:	f003 ffc2 	bl	8004e80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000efc:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <main+0x114>)
 8000efe:	f7ff f96f 	bl	80001e0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	4932      	ldr	r1, [pc, #200]	; (8000fd4 <main+0x114>)
 8000f0c:	4832      	ldr	r0, [pc, #200]	; (8000fd8 <main+0x118>)
 8000f0e:	f002 fec8 	bl	8003ca2 <HAL_UART_Transmit>
	sprintf(msg,"%hu\r\n", adc[1]);
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x10c>)
 8000f14:	885b      	ldrh	r3, [r3, #2]
 8000f16:	461a      	mov	r2, r3
 8000f18:	492d      	ldr	r1, [pc, #180]	; (8000fd0 <main+0x110>)
 8000f1a:	482e      	ldr	r0, [pc, #184]	; (8000fd4 <main+0x114>)
 8000f1c:	f003 ffb0 	bl	8004e80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f20:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <main+0x114>)
 8000f22:	f7ff f95d 	bl	80001e0 <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <main+0x114>)
 8000f30:	4829      	ldr	r0, [pc, #164]	; (8000fd8 <main+0x118>)
 8000f32:	f002 feb6 	bl	8003ca2 <HAL_UART_Transmit>
	HAL_Delay(200);
 8000f36:	20c8      	movs	r0, #200	; 0xc8
 8000f38:	f000 fc7c 	bl	8001834 <HAL_Delay>
	double tempp, xy = 500 * 2.56 / 1024;
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <main+0x11c>)
 8000f42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tempp = (double)((-1481.96) + sqrt(2196200 + (1.8639 - xy) / 0.00000388));
 8000f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f4a:	a117      	add	r1, pc, #92	; (adr r1, 8000fa8 <main+0xe8>)
 8000f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f50:	f7ff f9a2 	bl	8000298 <__aeabi_dsub>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	a314      	add	r3, pc, #80	; (adr r3, 8000fb0 <main+0xf0>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fc7b 	bl	800085c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	a312      	add	r3, pc, #72	; (adr r3, 8000fb8 <main+0xf8>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff f992 	bl	800029c <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	ec43 2b17 	vmov	d7, r2, r3
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	f003 fa00 	bl	800438c <sqrt>
 8000f8c:	ec51 0b10 	vmov	r0, r1, d0
 8000f90:	a30b      	add	r3, pc, #44	; (adr r3, 8000fc0 <main+0x100>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff f97f 	bl	8000298 <__aeabi_dsub>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	e9c7 2300 	strd	r2, r3, [r7]
  {
 8000fa2:	e79f      	b.n	8000ee4 <main+0x24>
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	ce703afb 	.word	0xce703afb
 8000fac:	3ffdd288 	.word	0x3ffdd288
 8000fb0:	4768ca44 	.word	0x4768ca44
 8000fb4:	3ed0461e 	.word	0x3ed0461e
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	4140c174 	.word	0x4140c174
 8000fc0:	0a3d70a4 	.word	0x0a3d70a4
 8000fc4:	409727d7 	.word	0x409727d7
 8000fc8:	200001f8 	.word	0x200001f8
 8000fcc:	200002ec 	.word	0x200002ec
 8000fd0:	08007388 	.word	0x08007388
 8000fd4:	200002e4 	.word	0x200002e4
 8000fd8:	200002a0 	.word	0x200002a0
 8000fdc:	3ff40000 	.word	0x3ff40000

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fad4 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <SystemClock_Config+0xb8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <SystemClock_Config+0xb8>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <SystemClock_Config+0xb8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <SystemClock_Config+0xbc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <SystemClock_Config+0xbc>)
 800102e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <SystemClock_Config+0xbc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fe8d 	bl	8002d74 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001060:	f000 f904 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f8f0 	bl	8003264 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800108a:	f000 f8ef 	bl	800126c <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	; 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <MX_ADC1_Init+0xbc>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <MX_ADC1_Init+0xc0>)
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC1_Init+0xb8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <MX_ADC1_Init+0xb8>)
 8001100:	f000 fbbc 	bl	800187c <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8af 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800110e:	2305      	movs	r3, #5
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <MX_ADC1_Init+0xb8>)
 8001120:	f000 fdb2 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800112a:	f000 f89f 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800112e:	2306      	movs	r3, #6
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001132:	2302      	movs	r3, #2
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001136:	2301      	movs	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC1_Init+0xb8>)
 8001140:	f000 fda2 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800114a:	f000 f88f 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f8 	.word	0x200001f8
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f002 fd34 	bl	8003c08 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f861 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002a0 	.word	0x200002a0
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2038      	movs	r0, #56	; 0x38
 80011e0:	f001 f8aa 	bl	8002338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011e4:	2038      	movs	r0, #56	; 0x38
 80011e6:	f001 f8c3 	bl	8002370 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_GPIO_Init+0x4c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_GPIO_Init+0x4c>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_GPIO_Init+0x4c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_GPIO_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <MX_GPIO_Init+0x4c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_GPIO_Init+0x4c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800125a:	f000 facb 	bl	80017f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <HAL_ADC_MspInit+0xdc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d157      	bne.n	800139a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_ADC_MspInit+0xe0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <HAL_ADC_MspInit+0xe4>)
 8001336:	f001 fb99 	bl	8002a6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 800133c:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 800135c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001360:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001368:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001380:	f001 f804 	bl	800238c <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800138a:	f7ff ff6f 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001392:	639a      	str	r2, [r3, #56]	; 0x38
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	20000240 	.word	0x20000240
 80013b4:	40026410 	.word	0x40026410

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_UART_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001412:	230c      	movs	r3, #12
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001422:	2307      	movs	r3, #7
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0x8c>)
 800142e:	f001 fb1d 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004400 	.word	0x40004400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_InitTick+0xd0>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <HAL_InitTick+0xd0>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6453      	str	r3, [r2, #68]	; 0x44
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_InitTick+0xd0>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f002 f910 	bl	80036a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001484:	f002 f8fa 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8001488:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_InitTick+0xd4>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	3b01      	subs	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_InitTick+0xd8>)
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_InitTick+0xdc>)
 800149c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_InitTick+0xd8>)
 80014a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_InitTick+0xd8>)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_InitTick+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_InitTick+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_InitTick+0xd8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <HAL_InitTick+0xd8>)
 80014c0:	f002 f922 	bl	8003708 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11b      	bne.n	800150a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <HAL_InitTick+0xd8>)
 80014d4:	f002 f972 	bl	80037bc <HAL_TIM_Base_Start_IT>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d111      	bne.n	800150a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014e6:	2019      	movs	r0, #25
 80014e8:	f000 ff42 	bl	8002370 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	d808      	bhi.n	8001504 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014f2:	2200      	movs	r2, #0
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	2019      	movs	r0, #25
 80014f8:	f000 ff1e 	bl	8002338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_InitTick+0xe0>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e002      	b.n	800150a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800150a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800150e:	4618      	mov	r0, r3
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	431bde83 	.word	0x431bde83
 8001520:	200002f0 	.word	0x200002f0
 8001524:	40010000 	.word	0x40010000
 8001528:	20000004 	.word	0x20000004

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800158a:	f002 f979 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002f0 	.word	0x200002f0

08001598 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA2_Stream0_IRQHandler+0x10>)
 800159e:	f000 fffb 	bl	8002598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000240 	.word	0x20000240

080015ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_kill>:

int _kill(int pid, int sig)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c6:	f002 ffbf 	bl	8004548 <__errno>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2216      	movs	r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
  return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_exit>:

void _exit (int status)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffe7 	bl	80015bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ee:	e7fe      	b.n	80015ee <_exit+0x12>

080015f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
  }

  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
  }
  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f002 ff24 	bl	8004548 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20018000 	.word	0x20018000
 800172c:	00000400 	.word	0x00000400
 8001730:	20000338 	.word	0x20000338
 8001734:	20000350 	.word	0x20000350

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001786:	f7ff ffd7 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 fee3 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fb97 	bl	8000ec0 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001794:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017a0:	0800779c 	.word	0x0800779c
  ldr r2, =_sbss
 80017a4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017a8:	20000350 	.word	0x20000350

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_Init+0x40>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_Init+0x40>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_Init+0x40>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 fda2 	bl	8002322 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	200f      	movs	r0, #15
 80017e0:	f7ff fe32 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fd48 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	2000033c 	.word	0x2000033c

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000033c 	.word	0x2000033c

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e033      	b.n	80018fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fd14 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c2:	f023 0302 	bic.w	r3, r3, #2
 80018c6:	f043 0202 	orr.w	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fafc 	bl	8001ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	f043 0201 	orr.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
 80018ea:	e001      	b.n	80018f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADC_Start+0x1a>
 800191a:	2302      	movs	r3, #2
 800191c:	e097      	b.n	8001a4e <HAL_ADC_Start+0x14a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d018      	beq.n	8001966 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_ADC_Start+0x158>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <HAL_ADC_Start+0x15c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0c9a      	lsrs	r2, r3, #18
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001958:	e002      	b.n	8001960 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3b01      	subs	r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f9      	bne.n	800195a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d15f      	bne.n	8001a34 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b2:	d106      	bne.n	80019c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f023 0206 	bic.w	r2, r3, #6
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_ADC_Start+0x160>)
 80019d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d129      	bne.n	8001a4c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e020      	b.n	8001a4c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_ADC_Start+0x164>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d11b      	bne.n	8001a4c <HAL_ADC_Start+0x148>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d114      	bne.n	8001a4c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	e00b      	b.n	8001a4c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f043 0210 	orr.w	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	40012300 	.word	0x40012300
 8001a68:	40012000 	.word	0x40012000

08001a6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Start_DMA+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ce      	b.n	8001c28 <HAL_ADC_Start_DMA+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d018      	beq.n	8001ad2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab0:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_ADC_Start_DMA+0x1c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a5f      	ldr	r2, [pc, #380]	; (8001c34 <HAL_ADC_Start_DMA+0x1c8>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9a      	lsrs	r2, r3, #18
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae0:	d107      	bne.n	8001af2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8086 	bne.w	8001c0e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f023 0206 	bic.w	r2, r3, #6
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b4e:	e002      	b.n	8001b56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_ADC_Start_DMA+0x1cc>)
 8001b60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	4a35      	ldr	r2, [pc, #212]	; (8001c3c <HAL_ADC_Start_DMA+0x1d0>)
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_ADC_Start_DMA+0x1d4>)
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_ADC_Start_DMA+0x1d8>)
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	334c      	adds	r3, #76	; 0x4c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f000 fc98 	bl	80024e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10f      	bne.n	8001be4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d129      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	e020      	b.n	8001c26 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_ADC_Start_DMA+0x1dc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11b      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x1ba>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d114      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e00b      	b.n	8001c26 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000000 	.word	0x20000000
 8001c34:	431bde83 	.word	0x431bde83
 8001c38:	40012300 	.word	0x40012300
 8001c3c:	080020c5 	.word	0x080020c5
 8001c40:	0800217f 	.word	0x0800217f
 8001c44:	0800219b 	.word	0x0800219b
 8001c48:	40012000 	.word	0x40012000

08001c4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1c>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e105      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x228>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d925      	bls.n	8001d00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b1e      	subs	r3, #30
 8001cca:	2207      	movs	r2, #7
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68d9      	ldr	r1, [r3, #12]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	4603      	mov	r3, r0
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4403      	add	r3, r0
 8001cf2:	3b1e      	subs	r3, #30
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	e022      	b.n	8001d46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6919      	ldr	r1, [r3, #16]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	2207      	movs	r2, #7
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	400a      	ands	r2, r1
 8001d22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4403      	add	r3, r0
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d824      	bhi.n	8001d98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b05      	subs	r3, #5
 8001d60:	221f      	movs	r2, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b05      	subs	r3, #5
 8001d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
 8001d96:	e04c      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d824      	bhi.n	8001dea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b23      	subs	r3, #35	; 0x23
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43da      	mvns	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b23      	subs	r3, #35	; 0x23
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
 8001de8:	e023      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b41      	subs	r3, #65	; 0x41
 8001dfc:	221f      	movs	r2, #31
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b41      	subs	r3, #65	; 0x41
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_ADC_ConfigChannel+0x234>)
 8001e34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <HAL_ADC_ConfigChannel+0x238>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1cc>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_ADC_ConfigChannel+0x238>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d123      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x21e>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d003      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x1e6>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b11      	cmp	r3, #17
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d111      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_ADC_ConfigChannel+0x23c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_ADC_ConfigChannel+0x240>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9a      	lsrs	r2, r3, #18
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40012300 	.word	0x40012300
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	431bde83 	.word	0x431bde83

08001ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <ADC_Init+0x1f0>)
 8001ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <ADC_Init+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e00f      	b.n	8001fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0202 	bic.w	r2, r2, #2
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e1b      	ldrb	r3, [r3, #24]
 8001fe4:	005a      	lsls	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	3b01      	subs	r3, #1
 8002024:	035a      	lsls	r2, r3, #13
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e007      	b.n	8002040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	3b01      	subs	r3, #1
 800205c:	051a      	lsls	r2, r3, #20
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002082:	025a      	lsls	r2, r3, #9
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	029a      	lsls	r2, r3, #10
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	0f000001 	.word	0x0f000001

080020c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d13c      	bne.n	8002158 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12b      	bne.n	8002150 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d127      	bne.n	8002150 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002118:	2b00      	cmp	r3, #0
 800211a:	d119      	bne.n	8002150 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0220 	bic.w	r2, r2, #32
 800212a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff fd7b 	bl	8001c4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002156:	e00e      	b.n	8002176 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fd85 	bl	8001c74 <HAL_ADC_ErrorCallback>
}
 800216a:	e004      	b.n	8002176 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fd67 	bl	8001c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff fd5a 	bl	8001c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff4c 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234a:	f7ff ff61 	bl	8002210 <__NVIC_GetPriorityGrouping>
 800234e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	6978      	ldr	r0, [r7, #20]
 8002356:	f7ff ffb1 	bl	80022bc <NVIC_EncodePriority>
 800235a:	4602      	mov	r2, r0
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff80 	bl	8002268 <__NVIC_SetPriority>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff54 	bl	800222c <__NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fa40 	bl	800181c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e099      	b.n	80024dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	e00f      	b.n	80023ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ca:	f7ff fa27 	bl	800181c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d908      	bls.n	80023ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e078      	b.n	80024dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e8      	bne.n	80023ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_DMA_Init+0x158>)
 8002404:	4013      	ands	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4313      	orrs	r3, r2
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d117      	bne.n	80024ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa6f 	bl	8002974 <DMA_CheckFifoParam>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024aa:	2301      	movs	r3, #1
 80024ac:	e016      	b.n	80024dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa26 	bl	8002908 <DMA_CalcBaseAndBitshift>
 80024bc:	4603      	mov	r3, r0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	f010803f 	.word	0xf010803f

080024e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_DMA_Start_IT+0x26>
 800250a:	2302      	movs	r3, #2
 800250c:	e040      	b.n	8002590 <HAL_DMA_Start_IT+0xa8>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d12f      	bne.n	8002582 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f9b8 	bl	80028ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	223f      	movs	r2, #63	; 0x3f
 8002542:	409a      	lsls	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0216 	orr.w	r2, r2, #22
 8002556:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a4:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <HAL_DMA_IRQHandler+0x248>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a8e      	ldr	r2, [pc, #568]	; (80027e4 <HAL_DMA_IRQHandler+0x24c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2208      	movs	r2, #8
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2208      	movs	r2, #8
 80025f2:	409a      	lsls	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2201      	movs	r2, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2204      	movs	r2, #4
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2204      	movs	r2, #4
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0204 	orr.w	r2, r3, #4
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2210      	movs	r2, #16
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d043      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03c      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2210      	movs	r2, #16
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d018      	beq.n	80026da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d024      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
 80026c6:	e01f      	b.n	8002708 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01b      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e016      	b.n	8002708 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0208 	bic.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2220      	movs	r2, #32
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 808f 	beq.w	8002838 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8087 	beq.w	8002838 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	2220      	movs	r2, #32
 8002730:	409a      	lsls	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b05      	cmp	r3, #5
 8002740:	d136      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0216 	bic.w	r2, r2, #22
 8002750:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002760:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <HAL_DMA_IRQHandler+0x1da>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	223f      	movs	r2, #63	; 0x3f
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d07e      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
        }
        return;
 80027ae:	e079      	b.n	80028a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d031      	beq.n	8002838 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e02c      	b.n	8002838 <HAL_DMA_IRQHandler+0x2a0>
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000
 80027e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d023      	beq.n	8002838 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e01e      	b.n	8002838 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0210 	bic.w	r2, r2, #16
 8002816:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	2b00      	cmp	r3, #0
 800283e:	d032      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d022      	beq.n	8002892 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2205      	movs	r2, #5
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	3301      	adds	r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	d307      	bcc.n	8002880 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f2      	bne.n	8002864 <HAL_DMA_IRQHandler+0x2cc>
 800287e:	e000      	b.n	8002882 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002880:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
 80028a2:	e000      	b.n	80028a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028a4:	bf00      	nop
    }
  }
}
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d108      	bne.n	80028ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ea:	e007      	b.n	80028fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3b10      	subs	r3, #16
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <DMA_CalcBaseAndBitshift+0x64>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <DMA_CalcBaseAndBitshift+0x68>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d909      	bls.n	800294a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58
 8002948:	e007      	b.n	800295a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab
 8002970:	080073a8 	.word	0x080073a8

08002974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11f      	bne.n	80029ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d856      	bhi.n	8002a42 <DMA_CheckFifoParam+0xce>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <DMA_CheckFifoParam+0x28>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029bf 	.word	0x080029bf
 80029a4:	080029ad 	.word	0x080029ad
 80029a8:	08002a43 	.word	0x08002a43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d046      	beq.n	8002a46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e043      	b.n	8002a46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029c6:	d140      	bne.n	8002a4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029cc:	e03d      	b.n	8002a4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d121      	bne.n	8002a1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d837      	bhi.n	8002a4e <DMA_CheckFifoParam+0xda>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <DMA_CheckFifoParam+0x70>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029fb 	.word	0x080029fb
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	08002a0d 	.word	0x08002a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e030      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d025      	beq.n	8002a52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0a:	e022      	b.n	8002a52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1a:	e01c      	b.n	8002a56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d903      	bls.n	8002a2a <DMA_CheckFifoParam+0xb6>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d003      	beq.n	8002a30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a28:	e018      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2e:	e015      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e00b      	b.n	8002a5a <DMA_CheckFifoParam+0xe6>
      break;
 8002a42:	bf00      	nop
 8002a44:	e00a      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e008      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e006      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e004      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e159      	b.n	8002d3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8148 	bne.w	8002d36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a2 	beq.w	8002d36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b54      	ldr	r3, [pc, #336]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_GPIO_Init+0x2ec>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a49      	ldr	r2, [pc, #292]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x202>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_GPIO_Init+0x2f4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x1fe>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_GPIO_Init+0x2f8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_GPIO_Init+0x2fc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x1f6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a45      	ldr	r2, [pc, #276]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x1f2>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e008      	b.n	8002c70 <HAL_GPIO_Init+0x204>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x204>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e004      	b.n	8002c70 <HAL_GPIO_Init+0x204>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_Init+0x204>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x204>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	f002 0203 	and.w	r2, r2, #3
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	4093      	lsls	r3, r2
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c80:	4935      	ldr	r1, [pc, #212]	; (8002d58 <HAL_GPIO_Init+0x2ec>)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cdc:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d06:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	f67f aea2 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40020800 	.word	0x40020800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40013c00 	.word	0x40013c00

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e267      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d075      	beq.n	8002e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d92:	4b88      	ldr	r3, [pc, #544]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d00c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d112      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	4b7e      	ldr	r3, [pc, #504]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x108>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d157      	bne.n	8002e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e242      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x74>
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a75      	ldr	r2, [pc, #468]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xb0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x98>
 8002df2:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6f      	ldr	r2, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6c      	ldr	r2, [pc, #432]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xb0>
 8002e0c:	4b69      	ldr	r3, [pc, #420]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a68      	ldr	r2, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fcf6 	bl	800181c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fcf2 	bl	800181c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e207      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xc0>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fce2 	bl	800181c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fcde 	bl	800181c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1f3      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0xe8>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d063      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x152>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1c7      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4937      	ldr	r1, [pc, #220]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e03a      	b.n	8002f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <HAL_RCC_OscConfig+0x244>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7fe fc97 	bl	800181c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fc93 	bl	800181c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1a8      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCC_OscConfig+0x244>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fc76 	bl	800181c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe fc72 	bl	800181c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e187      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d036      	beq.n	8002fcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x248>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fc56 	bl	800181c <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fe fc52 	bl	800181c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e167      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x200>
 8002f92:	e01b      	b.n	8002fcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x248>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc3f 	bl	800181c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	e00e      	b.n	8002fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fc3b 	bl	800181c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d907      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e150      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	42470000 	.word	0x42470000
 8002fbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ea      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8097 	beq.w	8003108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a7c      	ldr	r2, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b7a      	ldr	r3, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b77      	ldr	r3, [pc, #476]	; (80031e8 <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b74      	ldr	r3, [pc, #464]	; (80031e8 <HAL_RCC_OscConfig+0x474>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a73      	ldr	r2, [pc, #460]	; (80031e8 <HAL_RCC_OscConfig+0x474>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe fbfb 	bl	800181c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fbf7 	bl	800181c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e10c      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x474>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x2ea>
 8003050:	4b64      	ldr	r3, [pc, #400]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a63      	ldr	r2, [pc, #396]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x324>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x30c>
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a5b      	ldr	r2, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x324>
 8003080:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe fbbc 	bl	800181c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	e00a      	b.n	80030be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe fbb8 	bl	800181c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0cb      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ee      	beq.n	80030a8 <HAL_RCC_OscConfig+0x334>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fe fba6 	bl	800181c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe fba2 	bl	800181c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0b5      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ee      	bne.n	80030d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	4a38      	ldr	r2, [pc, #224]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003106:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a1 	beq.w	8003254 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d05c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d141      	bne.n	80031aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fb76 	bl	800181c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fb72 	bl	800181c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e087      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	491b      	ldr	r1, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x478>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fb4b 	bl	800181c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe fb47 	bl	800181c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e05c      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x416>
 80031a8:	e054      	b.n	8003254 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x478>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fb34 	bl	800181c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fb30 	bl	800181c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e045      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x444>
 80031d6:	e03d      	b.n	8003254 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e038      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x4ec>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d028      	beq.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d121      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d11a      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003228:	4293      	cmp	r3, r2
 800322a:	d111      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0cc      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d90c      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b8      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	494d      	ldr	r1, [pc, #308]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d044      	beq.n	8003384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d119      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	2b03      	cmp	r3, #3
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e067      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4934      	ldr	r1, [pc, #208]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe fa62 	bl	800181c <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fe fa5e 	bl	800181c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20c      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490e      	ldr	r1, [pc, #56]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ea:	f000 f821 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	490a      	ldr	r1, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	5ccb      	ldrb	r3, [r1, r3]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe f81c 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00
 8003420:	40023800 	.word	0x40023800
 8003424:	08007390 	.word	0x08007390
 8003428:	20000000 	.word	0x20000000
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b094      	sub	sp, #80	; 0x50
 8003436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	647b      	str	r3, [r7, #68]	; 0x44
 800343c:	2300      	movs	r3, #0
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003440:	2300      	movs	r3, #0
 8003442:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003448:	4b79      	ldr	r3, [pc, #484]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d00d      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x40>
 8003454:	2b08      	cmp	r3, #8
 8003456:	f200 80e1 	bhi.w	800361c <HAL_RCC_GetSysClockFreq+0x1ec>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x34>
 800345e:	2b04      	cmp	r3, #4
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x3a>
 8003462:	e0db      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_GetSysClockFreq+0x204>)
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003468:	e0db      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346a:	4b73      	ldr	r3, [pc, #460]	; (8003638 <HAL_RCC_GetSysClockFreq+0x208>)
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346e:	e0d8      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003470:	4b6f      	ldr	r3, [pc, #444]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347a:	4b6d      	ldr	r3, [pc, #436]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003486:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	2200      	movs	r2, #0
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003490:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
 800349e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034a2:	4622      	mov	r2, r4
 80034a4:	462b      	mov	r3, r5
 80034a6:	f04f 0000 	mov.w	r0, #0
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	0159      	lsls	r1, r3, #5
 80034b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b4:	0150      	lsls	r0, r2, #5
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4621      	mov	r1, r4
 80034bc:	1a51      	subs	r1, r2, r1
 80034be:	6139      	str	r1, [r7, #16]
 80034c0:	4629      	mov	r1, r5
 80034c2:	eb63 0301 	sbc.w	r3, r3, r1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d4:	4659      	mov	r1, fp
 80034d6:	018b      	lsls	r3, r1, #6
 80034d8:	4651      	mov	r1, sl
 80034da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034de:	4651      	mov	r1, sl
 80034e0:	018a      	lsls	r2, r1, #6
 80034e2:	4651      	mov	r1, sl
 80034e4:	ebb2 0801 	subs.w	r8, r2, r1
 80034e8:	4659      	mov	r1, fp
 80034ea:	eb63 0901 	sbc.w	r9, r3, r1
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003502:	4690      	mov	r8, r2
 8003504:	4699      	mov	r9, r3
 8003506:	4623      	mov	r3, r4
 8003508:	eb18 0303 	adds.w	r3, r8, r3
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	462b      	mov	r3, r5
 8003510:	eb49 0303 	adc.w	r3, r9, r3
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003522:	4629      	mov	r1, r5
 8003524:	024b      	lsls	r3, r1, #9
 8003526:	4621      	mov	r1, r4
 8003528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800352c:	4621      	mov	r1, r4
 800352e:	024a      	lsls	r2, r1, #9
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003536:	2200      	movs	r2, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 800353a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800353c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003540:	f7fd fb3a 	bl	8000bb8 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800354c:	e058      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b38      	ldr	r3, [pc, #224]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	2200      	movs	r2, #0
 8003556:	4618      	mov	r0, r3
 8003558:	4611      	mov	r1, r2
 800355a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	f04f 0000 	mov.w	r0, #0
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	0159      	lsls	r1, r3, #5
 8003576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800357a:	0150      	lsls	r0, r2, #5
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4641      	mov	r1, r8
 8003582:	ebb2 0a01 	subs.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb63 0b01 	sbc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800359c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a0:	ebb2 040a 	subs.w	r4, r2, sl
 80035a4:	eb63 050b 	sbc.w	r5, r3, fp
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	00eb      	lsls	r3, r5, #3
 80035b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b6:	00e2      	lsls	r2, r4, #3
 80035b8:	4614      	mov	r4, r2
 80035ba:	461d      	mov	r5, r3
 80035bc:	4643      	mov	r3, r8
 80035be:	18e3      	adds	r3, r4, r3
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb45 0303 	adc.w	r3, r5, r3
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d6:	4629      	mov	r1, r5
 80035d8:	028b      	lsls	r3, r1, #10
 80035da:	4621      	mov	r1, r4
 80035dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e0:	4621      	mov	r1, r4
 80035e2:	028a      	lsls	r2, r1, #10
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ea:	2200      	movs	r2, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	61fa      	str	r2, [r7, #28]
 80035f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f4:	f7fd fae0 	bl	8000bb8 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003624:	4618      	mov	r0, r3
 8003626:	3750      	adds	r7, #80	; 0x50
 8003628:	46bd      	mov	sp, r7
 800362a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400
 8003638:	007a1200 	.word	0x007a1200

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	080073a0 	.word	0x080073a0

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffdc 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0b5b      	lsrs	r3, r3, #13
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	080073a0 	.word	0x080073a0

080036a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	220f      	movs	r2, #15
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_RCC_GetClockConfig+0x60>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40023c00 	.word	0x40023c00

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f839 	bl	80037a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 f9ca 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d001      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e044      	b.n	800385e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_TIM_Base_Start_IT+0xb0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d018      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d013      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_TIM_Base_Start_IT+0xb4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_Start_IT+0xb8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_TIM_Base_Start_IT+0xbc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_TIM_Base_Start_IT+0xc0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d010      	beq.n	800385c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	e007      	b.n	800385c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000

08003880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8ee 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8e0 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8f1 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0204 	mvn.w	r2, #4
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8c4 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8b6 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8c7 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0208 	mvn.w	r2, #8
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f89a 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f88c 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f89d 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b10      	cmp	r3, #16
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0210 	mvn.w	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2208      	movs	r2, #8
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f870 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f862 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f873 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0201 	mvn.w	r2, #1
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fc22 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8e2 	bl	8003bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f838 	bl	8003acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0220 	mvn.w	r2, #32
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8ac 	bl	8003be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00f      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00b      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01b      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d017      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <TIM_Base_SetConfig+0xf4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <TIM_Base_SetConfig+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <TIM_Base_SetConfig+0xfc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fbc2 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f929 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08a      	sub	sp, #40	; 0x28
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d17c      	bne.n	8003dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_UART_Transmit+0x2c>
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e075      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x3e>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2221      	movs	r2, #33	; 0x21
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fd91 	bl	800181c <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d10:	d108      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d34:	e02a      	b.n	8003d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f840 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e036      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e007      	b.n	8003d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1cf      	bne.n	8003d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f810 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b090      	sub	sp, #64	; 0x40
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	e050      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d04c      	beq.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de6:	f7fd fd19 	bl	800181c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d241      	bcs.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e16:	637a      	str	r2, [r7, #52]	; 0x34
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d09f      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3740      	adds	r7, #64	; 0x40
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea8:	b0c0      	sub	sp, #256	; 0x100
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	ea40 0301 	orr.w	r3, r0, r1
 8003ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003efc:	f021 010c 	bic.w	r1, r1, #12
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	6999      	ldr	r1, [r3, #24]
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	ea40 0301 	orr.w	r3, r0, r1
 8003f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <UART_SetConfig+0x2cc>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d005      	beq.n	8003f44 <UART_SetConfig+0xa0>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b8d      	ldr	r3, [pc, #564]	; (8004174 <UART_SetConfig+0x2d0>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d104      	bne.n	8003f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7ff fb9a 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8003f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f4c:	e003      	b.n	8003f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7ff fb81 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8003f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f60:	f040 810c 	bne.w	800417c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f86:	4621      	mov	r1, r4
 8003f88:	eb12 0801 	adds.w	r8, r2, r1
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb43 0901 	adc.w	r9, r3, r1
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	4699      	mov	r9, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	eb18 0303 	adds.w	r3, r8, r3
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	eb49 0303 	adc.w	r3, r9, r3
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	18db      	adds	r3, r3, r3
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	4613      	mov	r3, r2
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe8:	f7fc fde6 	bl	8000bb8 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <UART_SetConfig+0x2d4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	64b9      	str	r1, [r7, #72]	; 0x48
 8004014:	415b      	adcs	r3, r3
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800401c:	4641      	mov	r1, r8
 800401e:	eb12 0a01 	adds.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb43 0b01 	adc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403c:	4692      	mov	sl, r2
 800403e:	469b      	mov	fp, r3
 8004040:	4643      	mov	r3, r8
 8004042:	eb1a 0303 	adds.w	r3, sl, r3
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404a:	464b      	mov	r3, r9
 800404c:	eb4b 0303 	adc.w	r3, fp, r3
 8004050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004068:	460b      	mov	r3, r1
 800406a:	18db      	adds	r3, r3, r3
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
 800406e:	4613      	mov	r3, r2
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800407e:	f7fc fd9b 	bl	8000bb8 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 2302 	umull	r2, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ac:	441c      	add	r4, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c8:	415b      	adcs	r3, r3
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6339      	str	r1, [r7, #48]	; 0x30
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800411c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413a:	f7fc fd3d 	bl	8000bb8 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x2d4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <UART_SetConfig+0x2d4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800416c:	e105      	b.n	800437a <UART_SetConfig+0x4d6>
 800416e:	bf00      	nop
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800418e:	4642      	mov	r2, r8
 8004190:	464b      	mov	r3, r9
 8004192:	1891      	adds	r1, r2, r2
 8004194:	6239      	str	r1, [r7, #32]
 8004196:	415b      	adcs	r3, r3
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800419e:	4641      	mov	r1, r8
 80041a0:	1854      	adds	r4, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb43 0501 	adc.w	r5, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c4:	464b      	mov	r3, r9
 80041c6:	eb45 0303 	adc.w	r3, r5, r3
 80041ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ea:	4629      	mov	r1, r5
 80041ec:	008b      	lsls	r3, r1, #2
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f4:	4621      	mov	r1, r4
 80041f6:	008a      	lsls	r2, r1, #2
 80041f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041fc:	f7fc fcdc 	bl	8000bb8 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <UART_SetConfig+0x4e4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800421c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	61b9      	str	r1, [r7, #24]
 8004228:	415b      	adcs	r3, r3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6139      	str	r1, [r7, #16]
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	67bb      	str	r3, [r7, #120]	; 0x78
 800427a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004288:	4649      	mov	r1, r9
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	4641      	mov	r1, r8
 800428e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004292:	4641      	mov	r1, r8
 8004294:	008a      	lsls	r2, r1, #2
 8004296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429a:	f7fc fc8d 	bl	8000bb8 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <UART_SetConfig+0x4e4>)
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	2164      	movs	r1, #100	; 0x64
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	3332      	adds	r3, #50	; 0x32
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <UART_SetConfig+0x4e4>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c2:	441c      	add	r4, r3
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	673b      	str	r3, [r7, #112]	; 0x70
 80042cc:	677a      	str	r2, [r7, #116]	; 0x74
 80042ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d2:	4642      	mov	r2, r8
 80042d4:	464b      	mov	r3, r9
 80042d6:	1891      	adds	r1, r2, r2
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	415b      	adcs	r3, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e2:	4641      	mov	r1, r8
 80042e4:	1851      	adds	r1, r2, r1
 80042e6:	6039      	str	r1, [r7, #0]
 80042e8:	4649      	mov	r1, r9
 80042ea:	414b      	adcs	r3, r1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fa:	4659      	mov	r1, fp
 80042fc:	00cb      	lsls	r3, r1, #3
 80042fe:	4651      	mov	r1, sl
 8004300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004304:	4651      	mov	r1, sl
 8004306:	00ca      	lsls	r2, r1, #3
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	4603      	mov	r3, r0
 800430e:	4642      	mov	r2, r8
 8004310:	189b      	adds	r3, r3, r2
 8004312:	66bb      	str	r3, [r7, #104]	; 0x68
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	663b      	str	r3, [r7, #96]	; 0x60
 8004328:	667a      	str	r2, [r7, #100]	; 0x64
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004336:	4649      	mov	r1, r9
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4641      	mov	r1, r8
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4641      	mov	r1, r8
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004348:	f7fc fc36 	bl	8000bb8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <UART_SetConfig+0x4e4>)
 8004352:	fba3 1302 	umull	r1, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2164      	movs	r1, #100	; 0x64
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	3332      	adds	r3, #50	; 0x32
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <UART_SetConfig+0x4e4>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4422      	add	r2, r4
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	bf00      	nop
 800437c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	51eb851f 	.word	0x51eb851f

0800438c <sqrt>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	ed2d 8b02 	vpush	{d8}
 8004392:	ec55 4b10 	vmov	r4, r5, d0
 8004396:	f000 f825 	bl	80043e4 <__ieee754_sqrt>
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	eeb0 8a40 	vmov.f32	s16, s0
 80043a6:	eef0 8a60 	vmov.f32	s17, s1
 80043aa:	f7fc fbc7 	bl	8000b3c <__aeabi_dcmpun>
 80043ae:	b990      	cbnz	r0, 80043d6 <sqrt+0x4a>
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc fb98 	bl	8000aec <__aeabi_dcmplt>
 80043bc:	b158      	cbz	r0, 80043d6 <sqrt+0x4a>
 80043be:	f000 f8c3 	bl	8004548 <__errno>
 80043c2:	2321      	movs	r3, #33	; 0x21
 80043c4:	6003      	str	r3, [r0, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2300      	movs	r3, #0
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fa45 	bl	800085c <__aeabi_ddiv>
 80043d2:	ec41 0b18 	vmov	d8, r0, r1
 80043d6:	eeb0 0a48 	vmov.f32	s0, s16
 80043da:	eef0 0a68 	vmov.f32	s1, s17
 80043de:	ecbd 8b02 	vpop	{d8}
 80043e2:	bd38      	pop	{r3, r4, r5, pc}

080043e4 <__ieee754_sqrt>:
 80043e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e8:	ec55 4b10 	vmov	r4, r5, d0
 80043ec:	4e55      	ldr	r6, [pc, #340]	; (8004544 <__ieee754_sqrt+0x160>)
 80043ee:	43ae      	bics	r6, r5
 80043f0:	ee10 0a10 	vmov	r0, s0
 80043f4:	ee10 3a10 	vmov	r3, s0
 80043f8:	462a      	mov	r2, r5
 80043fa:	4629      	mov	r1, r5
 80043fc:	d110      	bne.n	8004420 <__ieee754_sqrt+0x3c>
 80043fe:	ee10 2a10 	vmov	r2, s0
 8004402:	462b      	mov	r3, r5
 8004404:	f7fc f900 	bl	8000608 <__aeabi_dmul>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fb ff44 	bl	800029c <__adddf3>
 8004414:	4604      	mov	r4, r0
 8004416:	460d      	mov	r5, r1
 8004418:	ec45 4b10 	vmov	d0, r4, r5
 800441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004420:	2d00      	cmp	r5, #0
 8004422:	dc10      	bgt.n	8004446 <__ieee754_sqrt+0x62>
 8004424:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004428:	4330      	orrs	r0, r6
 800442a:	d0f5      	beq.n	8004418 <__ieee754_sqrt+0x34>
 800442c:	b15d      	cbz	r5, 8004446 <__ieee754_sqrt+0x62>
 800442e:	ee10 2a10 	vmov	r2, s0
 8004432:	462b      	mov	r3, r5
 8004434:	ee10 0a10 	vmov	r0, s0
 8004438:	f7fb ff2e 	bl	8000298 <__aeabi_dsub>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	f7fc fa0c 	bl	800085c <__aeabi_ddiv>
 8004444:	e7e6      	b.n	8004414 <__ieee754_sqrt+0x30>
 8004446:	1512      	asrs	r2, r2, #20
 8004448:	d074      	beq.n	8004534 <__ieee754_sqrt+0x150>
 800444a:	07d4      	lsls	r4, r2, #31
 800444c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004450:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004458:	bf5e      	ittt	pl
 800445a:	0fda      	lsrpl	r2, r3, #31
 800445c:	005b      	lslpl	r3, r3, #1
 800445e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004462:	2400      	movs	r4, #0
 8004464:	0fda      	lsrs	r2, r3, #31
 8004466:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800446a:	107f      	asrs	r7, r7, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2516      	movs	r5, #22
 8004470:	4620      	mov	r0, r4
 8004472:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004476:	1886      	adds	r6, r0, r2
 8004478:	428e      	cmp	r6, r1
 800447a:	bfde      	ittt	le
 800447c:	1b89      	suble	r1, r1, r6
 800447e:	18b0      	addle	r0, r6, r2
 8004480:	18a4      	addle	r4, r4, r2
 8004482:	0049      	lsls	r1, r1, #1
 8004484:	3d01      	subs	r5, #1
 8004486:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800448a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800448e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004492:	d1f0      	bne.n	8004476 <__ieee754_sqrt+0x92>
 8004494:	462a      	mov	r2, r5
 8004496:	f04f 0e20 	mov.w	lr, #32
 800449a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800449e:	4281      	cmp	r1, r0
 80044a0:	eb06 0c05 	add.w	ip, r6, r5
 80044a4:	dc02      	bgt.n	80044ac <__ieee754_sqrt+0xc8>
 80044a6:	d113      	bne.n	80044d0 <__ieee754_sqrt+0xec>
 80044a8:	459c      	cmp	ip, r3
 80044aa:	d811      	bhi.n	80044d0 <__ieee754_sqrt+0xec>
 80044ac:	f1bc 0f00 	cmp.w	ip, #0
 80044b0:	eb0c 0506 	add.w	r5, ip, r6
 80044b4:	da43      	bge.n	800453e <__ieee754_sqrt+0x15a>
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	db41      	blt.n	800453e <__ieee754_sqrt+0x15a>
 80044ba:	f100 0801 	add.w	r8, r0, #1
 80044be:	1a09      	subs	r1, r1, r0
 80044c0:	459c      	cmp	ip, r3
 80044c2:	bf88      	it	hi
 80044c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80044c8:	eba3 030c 	sub.w	r3, r3, ip
 80044cc:	4432      	add	r2, r6
 80044ce:	4640      	mov	r0, r8
 80044d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80044d4:	f1be 0e01 	subs.w	lr, lr, #1
 80044d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80044dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80044e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80044e4:	d1db      	bne.n	800449e <__ieee754_sqrt+0xba>
 80044e6:	430b      	orrs	r3, r1
 80044e8:	d006      	beq.n	80044f8 <__ieee754_sqrt+0x114>
 80044ea:	1c50      	adds	r0, r2, #1
 80044ec:	bf13      	iteet	ne
 80044ee:	3201      	addne	r2, #1
 80044f0:	3401      	addeq	r4, #1
 80044f2:	4672      	moveq	r2, lr
 80044f4:	f022 0201 	bicne.w	r2, r2, #1
 80044f8:	1063      	asrs	r3, r4, #1
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	07e1      	lsls	r1, r4, #31
 80044fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004502:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004506:	bf48      	it	mi
 8004508:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800450c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004510:	4614      	mov	r4, r2
 8004512:	e781      	b.n	8004418 <__ieee754_sqrt+0x34>
 8004514:	0ad9      	lsrs	r1, r3, #11
 8004516:	3815      	subs	r0, #21
 8004518:	055b      	lsls	r3, r3, #21
 800451a:	2900      	cmp	r1, #0
 800451c:	d0fa      	beq.n	8004514 <__ieee754_sqrt+0x130>
 800451e:	02cd      	lsls	r5, r1, #11
 8004520:	d50a      	bpl.n	8004538 <__ieee754_sqrt+0x154>
 8004522:	f1c2 0420 	rsb	r4, r2, #32
 8004526:	fa23 f404 	lsr.w	r4, r3, r4
 800452a:	1e55      	subs	r5, r2, #1
 800452c:	4093      	lsls	r3, r2
 800452e:	4321      	orrs	r1, r4
 8004530:	1b42      	subs	r2, r0, r5
 8004532:	e78a      	b.n	800444a <__ieee754_sqrt+0x66>
 8004534:	4610      	mov	r0, r2
 8004536:	e7f0      	b.n	800451a <__ieee754_sqrt+0x136>
 8004538:	0049      	lsls	r1, r1, #1
 800453a:	3201      	adds	r2, #1
 800453c:	e7ef      	b.n	800451e <__ieee754_sqrt+0x13a>
 800453e:	4680      	mov	r8, r0
 8004540:	e7bd      	b.n	80044be <__ieee754_sqrt+0xda>
 8004542:	bf00      	nop
 8004544:	7ff00000 	.word	0x7ff00000

08004548 <__errno>:
 8004548:	4b01      	ldr	r3, [pc, #4]	; (8004550 <__errno+0x8>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000000c 	.word	0x2000000c

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4d0d      	ldr	r5, [pc, #52]	; (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	; (8004590 <__libc_init_array+0x3c>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2600      	movs	r6, #0
 8004560:	42a6      	cmp	r6, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4d0b      	ldr	r5, [pc, #44]	; (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	; (8004598 <__libc_init_array+0x44>)
 8004568:	f002 ff02 	bl	8007370 <_init>
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2600      	movs	r6, #0
 8004572:	42a6      	cmp	r6, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f855 3b04 	ldr.w	r3, [r5], #4
 800457c:	4798      	blx	r3
 800457e:	3601      	adds	r6, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f855 3b04 	ldr.w	r3, [r5], #4
 8004586:	4798      	blx	r3
 8004588:	3601      	adds	r6, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	08007794 	.word	0x08007794
 8004590:	08007794 	.word	0x08007794
 8004594:	08007794 	.word	0x08007794
 8004598:	08007798 	.word	0x08007798

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <__cvt>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	ec55 4b10 	vmov	r4, r5, d0
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	460e      	mov	r6, r1
 80045b8:	4619      	mov	r1, r3
 80045ba:	462b      	mov	r3, r5
 80045bc:	bfbb      	ittet	lt
 80045be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045c2:	461d      	movlt	r5, r3
 80045c4:	2300      	movge	r3, #0
 80045c6:	232d      	movlt	r3, #45	; 0x2d
 80045c8:	700b      	strb	r3, [r1, #0]
 80045ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045d0:	4691      	mov	r9, r2
 80045d2:	f023 0820 	bic.w	r8, r3, #32
 80045d6:	bfbc      	itt	lt
 80045d8:	4622      	movlt	r2, r4
 80045da:	4614      	movlt	r4, r2
 80045dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045e0:	d005      	beq.n	80045ee <__cvt+0x42>
 80045e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045e6:	d100      	bne.n	80045ea <__cvt+0x3e>
 80045e8:	3601      	adds	r6, #1
 80045ea:	2102      	movs	r1, #2
 80045ec:	e000      	b.n	80045f0 <__cvt+0x44>
 80045ee:	2103      	movs	r1, #3
 80045f0:	ab03      	add	r3, sp, #12
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	ab02      	add	r3, sp, #8
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	ec45 4b10 	vmov	d0, r4, r5
 80045fc:	4653      	mov	r3, sl
 80045fe:	4632      	mov	r2, r6
 8004600:	f000 fcea 	bl	8004fd8 <_dtoa_r>
 8004604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004608:	4607      	mov	r7, r0
 800460a:	d102      	bne.n	8004612 <__cvt+0x66>
 800460c:	f019 0f01 	tst.w	r9, #1
 8004610:	d022      	beq.n	8004658 <__cvt+0xac>
 8004612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004616:	eb07 0906 	add.w	r9, r7, r6
 800461a:	d110      	bne.n	800463e <__cvt+0x92>
 800461c:	783b      	ldrb	r3, [r7, #0]
 800461e:	2b30      	cmp	r3, #48	; 0x30
 8004620:	d10a      	bne.n	8004638 <__cvt+0x8c>
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fc fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800462e:	b918      	cbnz	r0, 8004638 <__cvt+0x8c>
 8004630:	f1c6 0601 	rsb	r6, r6, #1
 8004634:	f8ca 6000 	str.w	r6, [sl]
 8004638:	f8da 3000 	ldr.w	r3, [sl]
 800463c:	4499      	add	r9, r3
 800463e:	2200      	movs	r2, #0
 8004640:	2300      	movs	r3, #0
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	f7fc fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800464a:	b108      	cbz	r0, 8004650 <__cvt+0xa4>
 800464c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004650:	2230      	movs	r2, #48	; 0x30
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	454b      	cmp	r3, r9
 8004656:	d307      	bcc.n	8004668 <__cvt+0xbc>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800465c:	1bdb      	subs	r3, r3, r7
 800465e:	4638      	mov	r0, r7
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	b004      	add	sp, #16
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	1c59      	adds	r1, r3, #1
 800466a:	9103      	str	r1, [sp, #12]
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e7f0      	b.n	8004652 <__cvt+0xa6>

08004670 <__exponent>:
 8004670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004672:	4603      	mov	r3, r0
 8004674:	2900      	cmp	r1, #0
 8004676:	bfb8      	it	lt
 8004678:	4249      	neglt	r1, r1
 800467a:	f803 2b02 	strb.w	r2, [r3], #2
 800467e:	bfb4      	ite	lt
 8004680:	222d      	movlt	r2, #45	; 0x2d
 8004682:	222b      	movge	r2, #43	; 0x2b
 8004684:	2909      	cmp	r1, #9
 8004686:	7042      	strb	r2, [r0, #1]
 8004688:	dd2a      	ble.n	80046e0 <__exponent+0x70>
 800468a:	f10d 0407 	add.w	r4, sp, #7
 800468e:	46a4      	mov	ip, r4
 8004690:	270a      	movs	r7, #10
 8004692:	46a6      	mov	lr, r4
 8004694:	460a      	mov	r2, r1
 8004696:	fb91 f6f7 	sdiv	r6, r1, r7
 800469a:	fb07 1516 	mls	r5, r7, r6, r1
 800469e:	3530      	adds	r5, #48	; 0x30
 80046a0:	2a63      	cmp	r2, #99	; 0x63
 80046a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80046a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046aa:	4631      	mov	r1, r6
 80046ac:	dcf1      	bgt.n	8004692 <__exponent+0x22>
 80046ae:	3130      	adds	r1, #48	; 0x30
 80046b0:	f1ae 0502 	sub.w	r5, lr, #2
 80046b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046b8:	1c44      	adds	r4, r0, #1
 80046ba:	4629      	mov	r1, r5
 80046bc:	4561      	cmp	r1, ip
 80046be:	d30a      	bcc.n	80046d6 <__exponent+0x66>
 80046c0:	f10d 0209 	add.w	r2, sp, #9
 80046c4:	eba2 020e 	sub.w	r2, r2, lr
 80046c8:	4565      	cmp	r5, ip
 80046ca:	bf88      	it	hi
 80046cc:	2200      	movhi	r2, #0
 80046ce:	4413      	add	r3, r2
 80046d0:	1a18      	subs	r0, r3, r0
 80046d2:	b003      	add	sp, #12
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046de:	e7ed      	b.n	80046bc <__exponent+0x4c>
 80046e0:	2330      	movs	r3, #48	; 0x30
 80046e2:	3130      	adds	r1, #48	; 0x30
 80046e4:	7083      	strb	r3, [r0, #2]
 80046e6:	70c1      	strb	r1, [r0, #3]
 80046e8:	1d03      	adds	r3, r0, #4
 80046ea:	e7f1      	b.n	80046d0 <__exponent+0x60>

080046ec <_printf_float>:
 80046ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f0:	ed2d 8b02 	vpush	{d8}
 80046f4:	b08d      	sub	sp, #52	; 0x34
 80046f6:	460c      	mov	r4, r1
 80046f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046fc:	4616      	mov	r6, r2
 80046fe:	461f      	mov	r7, r3
 8004700:	4605      	mov	r5, r0
 8004702:	f001 fa57 	bl	8005bb4 <_localeconv_r>
 8004706:	f8d0 a000 	ldr.w	sl, [r0]
 800470a:	4650      	mov	r0, sl
 800470c:	f7fb fd68 	bl	80001e0 <strlen>
 8004710:	2300      	movs	r3, #0
 8004712:	930a      	str	r3, [sp, #40]	; 0x28
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	f8d8 3000 	ldr.w	r3, [r8]
 800471c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004720:	3307      	adds	r3, #7
 8004722:	f023 0307 	bic.w	r3, r3, #7
 8004726:	f103 0208 	add.w	r2, r3, #8
 800472a:	f8c8 2000 	str.w	r2, [r8]
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004736:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800473a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	f8cd 8018 	str.w	r8, [sp, #24]
 8004744:	ee08 0a10 	vmov	s16, r0
 8004748:	4b9f      	ldr	r3, [pc, #636]	; (80049c8 <_printf_float+0x2dc>)
 800474a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800474e:	f04f 32ff 	mov.w	r2, #4294967295
 8004752:	f7fc f9f3 	bl	8000b3c <__aeabi_dcmpun>
 8004756:	bb88      	cbnz	r0, 80047bc <_printf_float+0xd0>
 8004758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800475c:	4b9a      	ldr	r3, [pc, #616]	; (80049c8 <_printf_float+0x2dc>)
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	f7fc f9cd 	bl	8000b00 <__aeabi_dcmple>
 8004766:	bb48      	cbnz	r0, 80047bc <_printf_float+0xd0>
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	4640      	mov	r0, r8
 800476e:	4649      	mov	r1, r9
 8004770:	f7fc f9bc 	bl	8000aec <__aeabi_dcmplt>
 8004774:	b110      	cbz	r0, 800477c <_printf_float+0x90>
 8004776:	232d      	movs	r3, #45	; 0x2d
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477c:	4b93      	ldr	r3, [pc, #588]	; (80049cc <_printf_float+0x2e0>)
 800477e:	4894      	ldr	r0, [pc, #592]	; (80049d0 <_printf_float+0x2e4>)
 8004780:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004784:	bf94      	ite	ls
 8004786:	4698      	movls	r8, r3
 8004788:	4680      	movhi	r8, r0
 800478a:	2303      	movs	r3, #3
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	9b05      	ldr	r3, [sp, #20]
 8004790:	f023 0204 	bic.w	r2, r3, #4
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	f04f 0900 	mov.w	r9, #0
 800479a:	9700      	str	r7, [sp, #0]
 800479c:	4633      	mov	r3, r6
 800479e:	aa0b      	add	r2, sp, #44	; 0x2c
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f9d8 	bl	8004b58 <_printf_common>
 80047a8:	3001      	adds	r0, #1
 80047aa:	f040 8090 	bne.w	80048ce <_printf_float+0x1e2>
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	b00d      	add	sp, #52	; 0x34
 80047b4:	ecbd 8b02 	vpop	{d8}
 80047b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	4640      	mov	r0, r8
 80047c2:	4649      	mov	r1, r9
 80047c4:	f7fc f9ba 	bl	8000b3c <__aeabi_dcmpun>
 80047c8:	b140      	cbz	r0, 80047dc <_printf_float+0xf0>
 80047ca:	464b      	mov	r3, r9
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bfbc      	itt	lt
 80047d0:	232d      	movlt	r3, #45	; 0x2d
 80047d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047d6:	487f      	ldr	r0, [pc, #508]	; (80049d4 <_printf_float+0x2e8>)
 80047d8:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <_printf_float+0x2ec>)
 80047da:	e7d1      	b.n	8004780 <_printf_float+0x94>
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047e2:	9206      	str	r2, [sp, #24]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	d13f      	bne.n	8004868 <_printf_float+0x17c>
 80047e8:	2306      	movs	r3, #6
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	9b05      	ldr	r3, [sp, #20]
 80047ee:	6861      	ldr	r1, [r4, #4]
 80047f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047f4:	2300      	movs	r3, #0
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	ab0a      	add	r3, sp, #40	; 0x28
 80047fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047fe:	ab09      	add	r3, sp, #36	; 0x24
 8004800:	ec49 8b10 	vmov	d0, r8, r9
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	6022      	str	r2, [r4, #0]
 8004808:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800480c:	4628      	mov	r0, r5
 800480e:	f7ff fecd 	bl	80045ac <__cvt>
 8004812:	9b06      	ldr	r3, [sp, #24]
 8004814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004816:	2b47      	cmp	r3, #71	; 0x47
 8004818:	4680      	mov	r8, r0
 800481a:	d108      	bne.n	800482e <_printf_float+0x142>
 800481c:	1cc8      	adds	r0, r1, #3
 800481e:	db02      	blt.n	8004826 <_printf_float+0x13a>
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	4299      	cmp	r1, r3
 8004824:	dd41      	ble.n	80048aa <_printf_float+0x1be>
 8004826:	f1ab 0b02 	sub.w	fp, fp, #2
 800482a:	fa5f fb8b 	uxtb.w	fp, fp
 800482e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004832:	d820      	bhi.n	8004876 <_printf_float+0x18a>
 8004834:	3901      	subs	r1, #1
 8004836:	465a      	mov	r2, fp
 8004838:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800483c:	9109      	str	r1, [sp, #36]	; 0x24
 800483e:	f7ff ff17 	bl	8004670 <__exponent>
 8004842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004844:	1813      	adds	r3, r2, r0
 8004846:	2a01      	cmp	r2, #1
 8004848:	4681      	mov	r9, r0
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	dc02      	bgt.n	8004854 <_printf_float+0x168>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	07d2      	lsls	r2, r2, #31
 8004852:	d501      	bpl.n	8004858 <_printf_float+0x16c>
 8004854:	3301      	adds	r3, #1
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800485c:	2b00      	cmp	r3, #0
 800485e:	d09c      	beq.n	800479a <_printf_float+0xae>
 8004860:	232d      	movs	r3, #45	; 0x2d
 8004862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004866:	e798      	b.n	800479a <_printf_float+0xae>
 8004868:	9a06      	ldr	r2, [sp, #24]
 800486a:	2a47      	cmp	r2, #71	; 0x47
 800486c:	d1be      	bne.n	80047ec <_printf_float+0x100>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1bc      	bne.n	80047ec <_printf_float+0x100>
 8004872:	2301      	movs	r3, #1
 8004874:	e7b9      	b.n	80047ea <_printf_float+0xfe>
 8004876:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800487a:	d118      	bne.n	80048ae <_printf_float+0x1c2>
 800487c:	2900      	cmp	r1, #0
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	dd0b      	ble.n	800489a <_printf_float+0x1ae>
 8004882:	6121      	str	r1, [r4, #16]
 8004884:	b913      	cbnz	r3, 800488c <_printf_float+0x1a0>
 8004886:	6822      	ldr	r2, [r4, #0]
 8004888:	07d0      	lsls	r0, r2, #31
 800488a:	d502      	bpl.n	8004892 <_printf_float+0x1a6>
 800488c:	3301      	adds	r3, #1
 800488e:	440b      	add	r3, r1
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	65a1      	str	r1, [r4, #88]	; 0x58
 8004894:	f04f 0900 	mov.w	r9, #0
 8004898:	e7de      	b.n	8004858 <_printf_float+0x16c>
 800489a:	b913      	cbnz	r3, 80048a2 <_printf_float+0x1b6>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	07d2      	lsls	r2, r2, #31
 80048a0:	d501      	bpl.n	80048a6 <_printf_float+0x1ba>
 80048a2:	3302      	adds	r3, #2
 80048a4:	e7f4      	b.n	8004890 <_printf_float+0x1a4>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e7f2      	b.n	8004890 <_printf_float+0x1a4>
 80048aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b0:	4299      	cmp	r1, r3
 80048b2:	db05      	blt.n	80048c0 <_printf_float+0x1d4>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	6121      	str	r1, [r4, #16]
 80048b8:	07d8      	lsls	r0, r3, #31
 80048ba:	d5ea      	bpl.n	8004892 <_printf_float+0x1a6>
 80048bc:	1c4b      	adds	r3, r1, #1
 80048be:	e7e7      	b.n	8004890 <_printf_float+0x1a4>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	bfd4      	ite	le
 80048c4:	f1c1 0202 	rsble	r2, r1, #2
 80048c8:	2201      	movgt	r2, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	e7e0      	b.n	8004890 <_printf_float+0x1a4>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	055a      	lsls	r2, r3, #21
 80048d2:	d407      	bmi.n	80048e4 <_printf_float+0x1f8>
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	4642      	mov	r2, r8
 80048d8:	4631      	mov	r1, r6
 80048da:	4628      	mov	r0, r5
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	d12c      	bne.n	800493c <_printf_float+0x250>
 80048e2:	e764      	b.n	80047ae <_printf_float+0xc2>
 80048e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048e8:	f240 80e0 	bls.w	8004aac <_printf_float+0x3c0>
 80048ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048f0:	2200      	movs	r2, #0
 80048f2:	2300      	movs	r3, #0
 80048f4:	f7fc f8f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d034      	beq.n	8004966 <_printf_float+0x27a>
 80048fc:	4a37      	ldr	r2, [pc, #220]	; (80049dc <_printf_float+0x2f0>)
 80048fe:	2301      	movs	r3, #1
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	f43f af51 	beq.w	80047ae <_printf_float+0xc2>
 800490c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004910:	429a      	cmp	r2, r3
 8004912:	db02      	blt.n	800491a <_printf_float+0x22e>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	07d8      	lsls	r0, r3, #31
 8004918:	d510      	bpl.n	800493c <_printf_float+0x250>
 800491a:	ee18 3a10 	vmov	r3, s16
 800491e:	4652      	mov	r2, sl
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f af41 	beq.w	80047ae <_printf_float+0xc2>
 800492c:	f04f 0800 	mov.w	r8, #0
 8004930:	f104 091a 	add.w	r9, r4, #26
 8004934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004936:	3b01      	subs	r3, #1
 8004938:	4543      	cmp	r3, r8
 800493a:	dc09      	bgt.n	8004950 <_printf_float+0x264>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	079b      	lsls	r3, r3, #30
 8004940:	f100 8105 	bmi.w	8004b4e <_printf_float+0x462>
 8004944:	68e0      	ldr	r0, [r4, #12]
 8004946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004948:	4298      	cmp	r0, r3
 800494a:	bfb8      	it	lt
 800494c:	4618      	movlt	r0, r3
 800494e:	e730      	b.n	80047b2 <_printf_float+0xc6>
 8004950:	2301      	movs	r3, #1
 8004952:	464a      	mov	r2, r9
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f af27 	beq.w	80047ae <_printf_float+0xc2>
 8004960:	f108 0801 	add.w	r8, r8, #1
 8004964:	e7e6      	b.n	8004934 <_printf_float+0x248>
 8004966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	dc39      	bgt.n	80049e0 <_printf_float+0x2f4>
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <_printf_float+0x2f0>)
 800496e:	2301      	movs	r3, #1
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af19 	beq.w	80047ae <_printf_float+0xc2>
 800497c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004980:	4313      	orrs	r3, r2
 8004982:	d102      	bne.n	800498a <_printf_float+0x29e>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	07d9      	lsls	r1, r3, #31
 8004988:	d5d8      	bpl.n	800493c <_printf_float+0x250>
 800498a:	ee18 3a10 	vmov	r3, s16
 800498e:	4652      	mov	r2, sl
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af09 	beq.w	80047ae <_printf_float+0xc2>
 800499c:	f04f 0900 	mov.w	r9, #0
 80049a0:	f104 0a1a 	add.w	sl, r4, #26
 80049a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a6:	425b      	negs	r3, r3
 80049a8:	454b      	cmp	r3, r9
 80049aa:	dc01      	bgt.n	80049b0 <_printf_float+0x2c4>
 80049ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ae:	e792      	b.n	80048d6 <_printf_float+0x1ea>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4652      	mov	r2, sl
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f aef7 	beq.w	80047ae <_printf_float+0xc2>
 80049c0:	f109 0901 	add.w	r9, r9, #1
 80049c4:	e7ee      	b.n	80049a4 <_printf_float+0x2b8>
 80049c6:	bf00      	nop
 80049c8:	7fefffff 	.word	0x7fefffff
 80049cc:	080073b4 	.word	0x080073b4
 80049d0:	080073b8 	.word	0x080073b8
 80049d4:	080073c0 	.word	0x080073c0
 80049d8:	080073bc 	.word	0x080073bc
 80049dc:	080073c4 	.word	0x080073c4
 80049e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bfa8      	it	ge
 80049e8:	461a      	movge	r2, r3
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	4691      	mov	r9, r2
 80049ee:	dc37      	bgt.n	8004a60 <_printf_float+0x374>
 80049f0:	f04f 0b00 	mov.w	fp, #0
 80049f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049f8:	f104 021a 	add.w	r2, r4, #26
 80049fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049fe:	9305      	str	r3, [sp, #20]
 8004a00:	eba3 0309 	sub.w	r3, r3, r9
 8004a04:	455b      	cmp	r3, fp
 8004a06:	dc33      	bgt.n	8004a70 <_printf_float+0x384>
 8004a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	db3b      	blt.n	8004a88 <_printf_float+0x39c>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	07da      	lsls	r2, r3, #31
 8004a14:	d438      	bmi.n	8004a88 <_printf_float+0x39c>
 8004a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a18:	9a05      	ldr	r2, [sp, #20]
 8004a1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a1c:	1a9a      	subs	r2, r3, r2
 8004a1e:	eba3 0901 	sub.w	r9, r3, r1
 8004a22:	4591      	cmp	r9, r2
 8004a24:	bfa8      	it	ge
 8004a26:	4691      	movge	r9, r2
 8004a28:	f1b9 0f00 	cmp.w	r9, #0
 8004a2c:	dc35      	bgt.n	8004a9a <_printf_float+0x3ae>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a36:	f104 0a1a 	add.w	sl, r4, #26
 8004a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	eba3 0309 	sub.w	r3, r3, r9
 8004a44:	4543      	cmp	r3, r8
 8004a46:	f77f af79 	ble.w	800493c <_printf_float+0x250>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4652      	mov	r2, sl
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	f43f aeaa 	beq.w	80047ae <_printf_float+0xc2>
 8004a5a:	f108 0801 	add.w	r8, r8, #1
 8004a5e:	e7ec      	b.n	8004a3a <_printf_float+0x34e>
 8004a60:	4613      	mov	r3, r2
 8004a62:	4631      	mov	r1, r6
 8004a64:	4642      	mov	r2, r8
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d1c0      	bne.n	80049f0 <_printf_float+0x304>
 8004a6e:	e69e      	b.n	80047ae <_printf_float+0xc2>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	9205      	str	r2, [sp, #20]
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f ae97 	beq.w	80047ae <_printf_float+0xc2>
 8004a80:	9a05      	ldr	r2, [sp, #20]
 8004a82:	f10b 0b01 	add.w	fp, fp, #1
 8004a86:	e7b9      	b.n	80049fc <_printf_float+0x310>
 8004a88:	ee18 3a10 	vmov	r3, s16
 8004a8c:	4652      	mov	r2, sl
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	d1be      	bne.n	8004a16 <_printf_float+0x32a>
 8004a98:	e689      	b.n	80047ae <_printf_float+0xc2>
 8004a9a:	9a05      	ldr	r2, [sp, #20]
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	4442      	add	r2, r8
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d1c1      	bne.n	8004a2e <_printf_float+0x342>
 8004aaa:	e680      	b.n	80047ae <_printf_float+0xc2>
 8004aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aae:	2a01      	cmp	r2, #1
 8004ab0:	dc01      	bgt.n	8004ab6 <_printf_float+0x3ca>
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d538      	bpl.n	8004b28 <_printf_float+0x43c>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4642      	mov	r2, r8
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae74 	beq.w	80047ae <_printf_float+0xc2>
 8004ac6:	ee18 3a10 	vmov	r3, s16
 8004aca:	4652      	mov	r2, sl
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f ae6b 	beq.w	80047ae <_printf_float+0xc2>
 8004ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004adc:	2200      	movs	r2, #0
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f7fb fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ae4:	b9d8      	cbnz	r0, 8004b1e <_printf_float+0x432>
 8004ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae8:	f108 0201 	add.w	r2, r8, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	d10e      	bne.n	8004b16 <_printf_float+0x42a>
 8004af8:	e659      	b.n	80047ae <_printf_float+0xc2>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b8      	blx	r7
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f ae52 	beq.w	80047ae <_printf_float+0xc2>
 8004b0a:	f108 0801 	add.w	r8, r8, #1
 8004b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4543      	cmp	r3, r8
 8004b14:	dcf1      	bgt.n	8004afa <_printf_float+0x40e>
 8004b16:	464b      	mov	r3, r9
 8004b18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b1c:	e6dc      	b.n	80048d8 <_printf_float+0x1ec>
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	f104 0a1a 	add.w	sl, r4, #26
 8004b26:	e7f2      	b.n	8004b0e <_printf_float+0x422>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	e7df      	b.n	8004aee <_printf_float+0x402>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	464a      	mov	r2, r9
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f43f ae38 	beq.w	80047ae <_printf_float+0xc2>
 8004b3e:	f108 0801 	add.w	r8, r8, #1
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b46:	1a5b      	subs	r3, r3, r1
 8004b48:	4543      	cmp	r3, r8
 8004b4a:	dcf0      	bgt.n	8004b2e <_printf_float+0x442>
 8004b4c:	e6fa      	b.n	8004944 <_printf_float+0x258>
 8004b4e:	f04f 0800 	mov.w	r8, #0
 8004b52:	f104 0919 	add.w	r9, r4, #25
 8004b56:	e7f4      	b.n	8004b42 <_printf_float+0x456>

08004b58 <_printf_common>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	4699      	mov	r9, r3
 8004b60:	688a      	ldr	r2, [r1, #8]
 8004b62:	690b      	ldr	r3, [r1, #16]
 8004b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	bfb8      	it	lt
 8004b6c:	4613      	movlt	r3, r2
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b74:	4607      	mov	r7, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	b10a      	cbz	r2, 8004b7e <_printf_common+0x26>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0699      	lsls	r1, r3, #26
 8004b82:	bf42      	ittt	mi
 8004b84:	6833      	ldrmi	r3, [r6, #0]
 8004b86:	3302      	addmi	r3, #2
 8004b88:	6033      	strmi	r3, [r6, #0]
 8004b8a:	6825      	ldr	r5, [r4, #0]
 8004b8c:	f015 0506 	ands.w	r5, r5, #6
 8004b90:	d106      	bne.n	8004ba0 <_printf_common+0x48>
 8004b92:	f104 0a19 	add.w	sl, r4, #25
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dc26      	bgt.n	8004bee <_printf_common+0x96>
 8004ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba4:	1e13      	subs	r3, r2, #0
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	0692      	lsls	r2, r2, #26
 8004bae:	d42b      	bmi.n	8004c08 <_printf_common+0xb0>
 8004bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d01e      	beq.n	8004bfc <_printf_common+0xa4>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	68e5      	ldr	r5, [r4, #12]
 8004bc2:	6832      	ldr	r2, [r6, #0]
 8004bc4:	f003 0306 	and.w	r3, r3, #6
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	bf08      	it	eq
 8004bcc:	1aad      	subeq	r5, r5, r2
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	bf0c      	ite	eq
 8004bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd8:	2500      	movne	r5, #0
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	bfc4      	itt	gt
 8004bde:	1a9b      	subgt	r3, r3, r2
 8004be0:	18ed      	addgt	r5, r5, r3
 8004be2:	2600      	movs	r6, #0
 8004be4:	341a      	adds	r4, #26
 8004be6:	42b5      	cmp	r5, r6
 8004be8:	d11a      	bne.n	8004c20 <_printf_common+0xc8>
 8004bea:	2000      	movs	r0, #0
 8004bec:	e008      	b.n	8004c00 <_printf_common+0xa8>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4652      	mov	r2, sl
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	47c0      	blx	r8
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d103      	bne.n	8004c04 <_printf_common+0xac>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c04:	3501      	adds	r5, #1
 8004c06:	e7c6      	b.n	8004b96 <_printf_common+0x3e>
 8004c08:	18e1      	adds	r1, r4, r3
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	2030      	movs	r0, #48	; 0x30
 8004c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c12:	4422      	add	r2, r4
 8004c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	e7c7      	b.n	8004bb0 <_printf_common+0x58>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4622      	mov	r2, r4
 8004c24:	4649      	mov	r1, r9
 8004c26:	4638      	mov	r0, r7
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0e6      	beq.n	8004bfc <_printf_common+0xa4>
 8004c2e:	3601      	adds	r6, #1
 8004c30:	e7d9      	b.n	8004be6 <_printf_common+0x8e>
	...

08004c34 <_printf_i>:
 8004c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	7e0f      	ldrb	r7, [r1, #24]
 8004c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c3c:	2f78      	cmp	r7, #120	; 0x78
 8004c3e:	4691      	mov	r9, r2
 8004c40:	4680      	mov	r8, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	469a      	mov	sl, r3
 8004c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c4a:	d807      	bhi.n	8004c5c <_printf_i+0x28>
 8004c4c:	2f62      	cmp	r7, #98	; 0x62
 8004c4e:	d80a      	bhi.n	8004c66 <_printf_i+0x32>
 8004c50:	2f00      	cmp	r7, #0
 8004c52:	f000 80d8 	beq.w	8004e06 <_printf_i+0x1d2>
 8004c56:	2f58      	cmp	r7, #88	; 0x58
 8004c58:	f000 80a3 	beq.w	8004da2 <_printf_i+0x16e>
 8004c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c64:	e03a      	b.n	8004cdc <_printf_i+0xa8>
 8004c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c6a:	2b15      	cmp	r3, #21
 8004c6c:	d8f6      	bhi.n	8004c5c <_printf_i+0x28>
 8004c6e:	a101      	add	r1, pc, #4	; (adr r1, 8004c74 <_printf_i+0x40>)
 8004c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ce1 	.word	0x08004ce1
 8004c7c:	08004c5d 	.word	0x08004c5d
 8004c80:	08004c5d 	.word	0x08004c5d
 8004c84:	08004c5d 	.word	0x08004c5d
 8004c88:	08004c5d 	.word	0x08004c5d
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004c5d 	.word	0x08004c5d
 8004c94:	08004c5d 	.word	0x08004c5d
 8004c98:	08004c5d 	.word	0x08004c5d
 8004c9c:	08004c5d 	.word	0x08004c5d
 8004ca0:	08004ded 	.word	0x08004ded
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004dcf 	.word	0x08004dcf
 8004cac:	08004c5d 	.word	0x08004c5d
 8004cb0:	08004c5d 	.word	0x08004c5d
 8004cb4:	08004e0f 	.word	0x08004e0f
 8004cb8:	08004c5d 	.word	0x08004c5d
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004c5d 	.word	0x08004c5d
 8004cc4:	08004c5d 	.word	0x08004c5d
 8004cc8:	08004dd7 	.word	0x08004dd7
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	1d1a      	adds	r2, r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0a3      	b.n	8004e28 <_printf_i+0x1f4>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	6829      	ldr	r1, [r5, #0]
 8004ce4:	0606      	lsls	r6, r0, #24
 8004ce6:	f101 0304 	add.w	r3, r1, #4
 8004cea:	d50a      	bpl.n	8004d02 <_printf_i+0xce>
 8004cec:	680e      	ldr	r6, [r1, #0]
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	da03      	bge.n	8004cfc <_printf_i+0xc8>
 8004cf4:	232d      	movs	r3, #45	; 0x2d
 8004cf6:	4276      	negs	r6, r6
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfc:	485e      	ldr	r0, [pc, #376]	; (8004e78 <_printf_i+0x244>)
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e019      	b.n	8004d36 <_printf_i+0x102>
 8004d02:	680e      	ldr	r6, [r1, #0]
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d0a:	bf18      	it	ne
 8004d0c:	b236      	sxthne	r6, r6
 8004d0e:	e7ef      	b.n	8004cf0 <_printf_i+0xbc>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	1d19      	adds	r1, r3, #4
 8004d16:	6029      	str	r1, [r5, #0]
 8004d18:	0601      	lsls	r1, r0, #24
 8004d1a:	d501      	bpl.n	8004d20 <_printf_i+0xec>
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <_printf_i+0xf2>
 8004d20:	0646      	lsls	r6, r0, #25
 8004d22:	d5fb      	bpl.n	8004d1c <_printf_i+0xe8>
 8004d24:	881e      	ldrh	r6, [r3, #0]
 8004d26:	4854      	ldr	r0, [pc, #336]	; (8004e78 <_printf_i+0x244>)
 8004d28:	2f6f      	cmp	r7, #111	; 0x6f
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2308      	moveq	r3, #8
 8004d2e:	230a      	movne	r3, #10
 8004d30:	2100      	movs	r1, #0
 8004d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d36:	6865      	ldr	r5, [r4, #4]
 8004d38:	60a5      	str	r5, [r4, #8]
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	bfa2      	ittt	ge
 8004d3e:	6821      	ldrge	r1, [r4, #0]
 8004d40:	f021 0104 	bicge.w	r1, r1, #4
 8004d44:	6021      	strge	r1, [r4, #0]
 8004d46:	b90e      	cbnz	r6, 8004d4c <_printf_i+0x118>
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	d04d      	beq.n	8004de8 <_printf_i+0x1b4>
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d52:	fb03 6711 	mls	r7, r3, r1, r6
 8004d56:	5dc7      	ldrb	r7, [r0, r7]
 8004d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d5c:	4637      	mov	r7, r6
 8004d5e:	42bb      	cmp	r3, r7
 8004d60:	460e      	mov	r6, r1
 8004d62:	d9f4      	bls.n	8004d4e <_printf_i+0x11a>
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d10b      	bne.n	8004d80 <_printf_i+0x14c>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	07de      	lsls	r6, r3, #31
 8004d6c:	d508      	bpl.n	8004d80 <_printf_i+0x14c>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	4299      	cmp	r1, r3
 8004d74:	bfde      	ittt	le
 8004d76:	2330      	movle	r3, #48	; 0x30
 8004d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d80:	1b52      	subs	r2, r2, r5
 8004d82:	6122      	str	r2, [r4, #16]
 8004d84:	f8cd a000 	str.w	sl, [sp]
 8004d88:	464b      	mov	r3, r9
 8004d8a:	aa03      	add	r2, sp, #12
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f7ff fee2 	bl	8004b58 <_printf_common>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d14c      	bne.n	8004e32 <_printf_i+0x1fe>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b004      	add	sp, #16
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	4835      	ldr	r0, [pc, #212]	; (8004e78 <_printf_i+0x244>)
 8004da4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004da8:	6829      	ldr	r1, [r5, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004db0:	6029      	str	r1, [r5, #0]
 8004db2:	061d      	lsls	r5, r3, #24
 8004db4:	d514      	bpl.n	8004de0 <_printf_i+0x1ac>
 8004db6:	07df      	lsls	r7, r3, #31
 8004db8:	bf44      	itt	mi
 8004dba:	f043 0320 	orrmi.w	r3, r3, #32
 8004dbe:	6023      	strmi	r3, [r4, #0]
 8004dc0:	b91e      	cbnz	r6, 8004dca <_printf_i+0x196>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f023 0320 	bic.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	2310      	movs	r3, #16
 8004dcc:	e7b0      	b.n	8004d30 <_printf_i+0xfc>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f043 0320 	orr.w	r3, r3, #32
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	2378      	movs	r3, #120	; 0x78
 8004dd8:	4828      	ldr	r0, [pc, #160]	; (8004e7c <_printf_i+0x248>)
 8004dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dde:	e7e3      	b.n	8004da8 <_printf_i+0x174>
 8004de0:	0659      	lsls	r1, r3, #25
 8004de2:	bf48      	it	mi
 8004de4:	b2b6      	uxthmi	r6, r6
 8004de6:	e7e6      	b.n	8004db6 <_printf_i+0x182>
 8004de8:	4615      	mov	r5, r2
 8004dea:	e7bb      	b.n	8004d64 <_printf_i+0x130>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	6826      	ldr	r6, [r4, #0]
 8004df0:	6961      	ldr	r1, [r4, #20]
 8004df2:	1d18      	adds	r0, r3, #4
 8004df4:	6028      	str	r0, [r5, #0]
 8004df6:	0635      	lsls	r5, r6, #24
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0x1cc>
 8004dfc:	6019      	str	r1, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0x1d2>
 8004e00:	0670      	lsls	r0, r6, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0x1c8>
 8004e04:	8019      	strh	r1, [r3, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	4615      	mov	r5, r2
 8004e0c:	e7ba      	b.n	8004d84 <_printf_i+0x150>
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	602a      	str	r2, [r5, #0]
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7fb f9e8 	bl	80001f0 <memchr>
 8004e20:	b108      	cbz	r0, 8004e26 <_printf_i+0x1f2>
 8004e22:	1b40      	subs	r0, r0, r5
 8004e24:	6060      	str	r0, [r4, #4]
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	e7a8      	b.n	8004d84 <_printf_i+0x150>
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4649      	mov	r1, r9
 8004e38:	4640      	mov	r0, r8
 8004e3a:	47d0      	blx	sl
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d0ab      	beq.n	8004d98 <_printf_i+0x164>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	079b      	lsls	r3, r3, #30
 8004e44:	d413      	bmi.n	8004e6e <_printf_i+0x23a>
 8004e46:	68e0      	ldr	r0, [r4, #12]
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	bfb8      	it	lt
 8004e4e:	4618      	movlt	r0, r3
 8004e50:	e7a4      	b.n	8004d9c <_printf_i+0x168>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d09b      	beq.n	8004d98 <_printf_i+0x164>
 8004e60:	3501      	adds	r5, #1
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	9903      	ldr	r1, [sp, #12]
 8004e66:	1a5b      	subs	r3, r3, r1
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dcf2      	bgt.n	8004e52 <_printf_i+0x21e>
 8004e6c:	e7eb      	b.n	8004e46 <_printf_i+0x212>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	f104 0619 	add.w	r6, r4, #25
 8004e74:	e7f5      	b.n	8004e62 <_printf_i+0x22e>
 8004e76:	bf00      	nop
 8004e78:	080073c6 	.word	0x080073c6
 8004e7c:	080073d7 	.word	0x080073d7

08004e80 <siprintf>:
 8004e80:	b40e      	push	{r1, r2, r3}
 8004e82:	b500      	push	{lr}
 8004e84:	b09c      	sub	sp, #112	; 0x70
 8004e86:	ab1d      	add	r3, sp, #116	; 0x74
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <siprintf+0x38>)
 8004e92:	9107      	str	r1, [sp, #28]
 8004e94:	9104      	str	r1, [sp, #16]
 8004e96:	4909      	ldr	r1, [pc, #36]	; (8004ebc <siprintf+0x3c>)
 8004e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9c:	9105      	str	r1, [sp, #20]
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	a902      	add	r1, sp, #8
 8004ea4:	f001 fb76 	bl	8006594 <_svfiprintf_r>
 8004ea8:	9b02      	ldr	r3, [sp, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	b01c      	add	sp, #112	; 0x70
 8004eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb4:	b003      	add	sp, #12
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	ffff0208 	.word	0xffff0208

08004ec0 <quorem>:
 8004ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	6903      	ldr	r3, [r0, #16]
 8004ec6:	690c      	ldr	r4, [r1, #16]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	4607      	mov	r7, r0
 8004ecc:	f2c0 8081 	blt.w	8004fd2 <quorem+0x112>
 8004ed0:	3c01      	subs	r4, #1
 8004ed2:	f101 0814 	add.w	r8, r1, #20
 8004ed6:	f100 0514 	add.w	r5, r0, #20
 8004eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	429a      	cmp	r2, r3
 8004eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ef8:	d331      	bcc.n	8004f5e <quorem+0x9e>
 8004efa:	f04f 0e00 	mov.w	lr, #0
 8004efe:	4640      	mov	r0, r8
 8004f00:	46ac      	mov	ip, r5
 8004f02:	46f2      	mov	sl, lr
 8004f04:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f08:	b293      	uxth	r3, r2
 8004f0a:	fb06 e303 	mla	r3, r6, r3, lr
 8004f0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ebaa 0303 	sub.w	r3, sl, r3
 8004f18:	f8dc a000 	ldr.w	sl, [ip]
 8004f1c:	0c12      	lsrs	r2, r2, #16
 8004f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8004f22:	fb06 e202 	mla	r2, r6, r2, lr
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	9b00      	ldr	r3, [sp, #0]
 8004f2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f38:	f8bd 3000 	ldrh.w	r3, [sp]
 8004f3c:	4581      	cmp	r9, r0
 8004f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f42:	f84c 3b04 	str.w	r3, [ip], #4
 8004f46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f4a:	d2db      	bcs.n	8004f04 <quorem+0x44>
 8004f4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f50:	b92b      	cbnz	r3, 8004f5e <quorem+0x9e>
 8004f52:	9b01      	ldr	r3, [sp, #4]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	429d      	cmp	r5, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	d32e      	bcc.n	8004fba <quorem+0xfa>
 8004f5c:	613c      	str	r4, [r7, #16]
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f001 f8c4 	bl	80060ec <__mcmp>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	db24      	blt.n	8004fb2 <quorem+0xf2>
 8004f68:	3601      	adds	r6, #1
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f04f 0c00 	mov.w	ip, #0
 8004f70:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f74:	f8d0 e000 	ldr.w	lr, [r0]
 8004f78:	b293      	uxth	r3, r2
 8004f7a:	ebac 0303 	sub.w	r3, ip, r3
 8004f7e:	0c12      	lsrs	r2, r2, #16
 8004f80:	fa13 f38e 	uxtah	r3, r3, lr
 8004f84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f92:	45c1      	cmp	r9, r8
 8004f94:	f840 3b04 	str.w	r3, [r0], #4
 8004f98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f9c:	d2e8      	bcs.n	8004f70 <quorem+0xb0>
 8004f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa6:	b922      	cbnz	r2, 8004fb2 <quorem+0xf2>
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	429d      	cmp	r5, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	d30a      	bcc.n	8004fc6 <quorem+0x106>
 8004fb0:	613c      	str	r4, [r7, #16]
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	b003      	add	sp, #12
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d1cc      	bne.n	8004f5c <quorem+0x9c>
 8004fc2:	3c01      	subs	r4, #1
 8004fc4:	e7c7      	b.n	8004f56 <quorem+0x96>
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <quorem+0xf0>
 8004fce:	3c01      	subs	r4, #1
 8004fd0:	e7eb      	b.n	8004faa <quorem+0xea>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e7ee      	b.n	8004fb4 <quorem+0xf4>
	...

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	ed2d 8b04 	vpush	{d8-d9}
 8004fe0:	ec57 6b10 	vmov	r6, r7, d0
 8004fe4:	b093      	sub	sp, #76	; 0x4c
 8004fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fec:	9106      	str	r1, [sp, #24]
 8004fee:	ee10 aa10 	vmov	sl, s0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ff8:	46bb      	mov	fp, r7
 8004ffa:	b975      	cbnz	r5, 800501a <_dtoa_r+0x42>
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f000 fddd 	bl	8005bbc <malloc>
 8005002:	4602      	mov	r2, r0
 8005004:	6260      	str	r0, [r4, #36]	; 0x24
 8005006:	b920      	cbnz	r0, 8005012 <_dtoa_r+0x3a>
 8005008:	4ba7      	ldr	r3, [pc, #668]	; (80052a8 <_dtoa_r+0x2d0>)
 800500a:	21ea      	movs	r1, #234	; 0xea
 800500c:	48a7      	ldr	r0, [pc, #668]	; (80052ac <_dtoa_r+0x2d4>)
 800500e:	f001 fbd1 	bl	80067b4 <__assert_func>
 8005012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005016:	6005      	str	r5, [r0, #0]
 8005018:	60c5      	str	r5, [r0, #12]
 800501a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	b151      	cbz	r1, 8005036 <_dtoa_r+0x5e>
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	604a      	str	r2, [r1, #4]
 8005024:	2301      	movs	r3, #1
 8005026:	4093      	lsls	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 fe1c 	bl	8005c68 <_Bfree>
 8005030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	1e3b      	subs	r3, r7, #0
 8005038:	bfaa      	itet	ge
 800503a:	2300      	movge	r3, #0
 800503c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005040:	f8c8 3000 	strge.w	r3, [r8]
 8005044:	4b9a      	ldr	r3, [pc, #616]	; (80052b0 <_dtoa_r+0x2d8>)
 8005046:	bfbc      	itt	lt
 8005048:	2201      	movlt	r2, #1
 800504a:	f8c8 2000 	strlt.w	r2, [r8]
 800504e:	ea33 030b 	bics.w	r3, r3, fp
 8005052:	d11b      	bne.n	800508c <_dtoa_r+0xb4>
 8005054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005056:	f242 730f 	movw	r3, #9999	; 0x270f
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005060:	4333      	orrs	r3, r6
 8005062:	f000 8592 	beq.w	8005b8a <_dtoa_r+0xbb2>
 8005066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005068:	b963      	cbnz	r3, 8005084 <_dtoa_r+0xac>
 800506a:	4b92      	ldr	r3, [pc, #584]	; (80052b4 <_dtoa_r+0x2dc>)
 800506c:	e022      	b.n	80050b4 <_dtoa_r+0xdc>
 800506e:	4b92      	ldr	r3, [pc, #584]	; (80052b8 <_dtoa_r+0x2e0>)
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	3308      	adds	r3, #8
 8005074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	9801      	ldr	r0, [sp, #4]
 800507a:	b013      	add	sp, #76	; 0x4c
 800507c:	ecbd 8b04 	vpop	{d8-d9}
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	4b8b      	ldr	r3, [pc, #556]	; (80052b4 <_dtoa_r+0x2dc>)
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	3303      	adds	r3, #3
 800508a:	e7f3      	b.n	8005074 <_dtoa_r+0x9c>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	f7fb fd20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005098:	ec4b ab19 	vmov	d9, sl, fp
 800509c:	4680      	mov	r8, r0
 800509e:	b158      	cbz	r0, 80050b8 <_dtoa_r+0xe0>
 80050a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050a2:	2301      	movs	r3, #1
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 856b 	beq.w	8005b84 <_dtoa_r+0xbac>
 80050ae:	4883      	ldr	r0, [pc, #524]	; (80052bc <_dtoa_r+0x2e4>)
 80050b0:	6018      	str	r0, [r3, #0]
 80050b2:	1e43      	subs	r3, r0, #1
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	e7df      	b.n	8005078 <_dtoa_r+0xa0>
 80050b8:	ec4b ab10 	vmov	d0, sl, fp
 80050bc:	aa10      	add	r2, sp, #64	; 0x40
 80050be:	a911      	add	r1, sp, #68	; 0x44
 80050c0:	4620      	mov	r0, r4
 80050c2:	f001 f8b9 	bl	8006238 <__d2b>
 80050c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80050ca:	ee08 0a10 	vmov	s16, r0
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	f000 8084 	beq.w	80051dc <_dtoa_r+0x204>
 80050d4:	ee19 3a90 	vmov	r3, s19
 80050d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80050e0:	4656      	mov	r6, sl
 80050e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80050e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80050ee:	4b74      	ldr	r3, [pc, #464]	; (80052c0 <_dtoa_r+0x2e8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb f8cf 	bl	8000298 <__aeabi_dsub>
 80050fa:	a365      	add	r3, pc, #404	; (adr r3, 8005290 <_dtoa_r+0x2b8>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f7fb fa82 	bl	8000608 <__aeabi_dmul>
 8005104:	a364      	add	r3, pc, #400	; (adr r3, 8005298 <_dtoa_r+0x2c0>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f8c7 	bl	800029c <__adddf3>
 800510e:	4606      	mov	r6, r0
 8005110:	4628      	mov	r0, r5
 8005112:	460f      	mov	r7, r1
 8005114:	f7fb fa0e 	bl	8000534 <__aeabi_i2d>
 8005118:	a361      	add	r3, pc, #388	; (adr r3, 80052a0 <_dtoa_r+0x2c8>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb fa73 	bl	8000608 <__aeabi_dmul>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4630      	mov	r0, r6
 8005128:	4639      	mov	r1, r7
 800512a:	f7fb f8b7 	bl	800029c <__adddf3>
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	f7fb fd19 	bl	8000b68 <__aeabi_d2iz>
 8005136:	2200      	movs	r2, #0
 8005138:	9000      	str	r0, [sp, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	4630      	mov	r0, r6
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb fcd4 	bl	8000aec <__aeabi_dcmplt>
 8005144:	b150      	cbz	r0, 800515c <_dtoa_r+0x184>
 8005146:	9800      	ldr	r0, [sp, #0]
 8005148:	f7fb f9f4 	bl	8000534 <__aeabi_i2d>
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	f7fb fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005154:	b910      	cbnz	r0, 800515c <_dtoa_r+0x184>
 8005156:	9b00      	ldr	r3, [sp, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	9b00      	ldr	r3, [sp, #0]
 800515e:	2b16      	cmp	r3, #22
 8005160:	d85a      	bhi.n	8005218 <_dtoa_r+0x240>
 8005162:	9a00      	ldr	r2, [sp, #0]
 8005164:	4b57      	ldr	r3, [pc, #348]	; (80052c4 <_dtoa_r+0x2ec>)
 8005166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	ec51 0b19 	vmov	r0, r1, d9
 8005172:	f7fb fcbb 	bl	8000aec <__aeabi_dcmplt>
 8005176:	2800      	cmp	r0, #0
 8005178:	d050      	beq.n	800521c <_dtoa_r+0x244>
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	3b01      	subs	r3, #1
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	930b      	str	r3, [sp, #44]	; 0x2c
 8005184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005186:	1b5d      	subs	r5, r3, r5
 8005188:	1e6b      	subs	r3, r5, #1
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	bf45      	ittet	mi
 800518e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005192:	9304      	strmi	r3, [sp, #16]
 8005194:	2300      	movpl	r3, #0
 8005196:	2300      	movmi	r3, #0
 8005198:	bf4c      	ite	mi
 800519a:	9305      	strmi	r3, [sp, #20]
 800519c:	9304      	strpl	r3, [sp, #16]
 800519e:	9b00      	ldr	r3, [sp, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db3d      	blt.n	8005220 <_dtoa_r+0x248>
 80051a4:	9b05      	ldr	r3, [sp, #20]
 80051a6:	9a00      	ldr	r2, [sp, #0]
 80051a8:	920a      	str	r2, [sp, #40]	; 0x28
 80051aa:	4413      	add	r3, r2
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9307      	str	r3, [sp, #28]
 80051b2:	9b06      	ldr	r3, [sp, #24]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	f200 8089 	bhi.w	80052cc <_dtoa_r+0x2f4>
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	bfc4      	itt	gt
 80051be:	3b04      	subgt	r3, #4
 80051c0:	9306      	strgt	r3, [sp, #24]
 80051c2:	9b06      	ldr	r3, [sp, #24]
 80051c4:	f1a3 0302 	sub.w	r3, r3, #2
 80051c8:	bfcc      	ite	gt
 80051ca:	2500      	movgt	r5, #0
 80051cc:	2501      	movle	r5, #1
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	f200 8087 	bhi.w	80052e2 <_dtoa_r+0x30a>
 80051d4:	e8df f003 	tbb	[pc, r3]
 80051d8:	59383a2d 	.word	0x59383a2d
 80051dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051e0:	441d      	add	r5, r3
 80051e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	bfc1      	itttt	gt
 80051ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80051f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80051f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051fa:	bfda      	itte	le
 80051fc:	f1c3 0320 	rsble	r3, r3, #32
 8005200:	fa06 f003 	lslle.w	r0, r6, r3
 8005204:	4318      	orrgt	r0, r3
 8005206:	f7fb f985 	bl	8000514 <__aeabi_ui2d>
 800520a:	2301      	movs	r3, #1
 800520c:	4606      	mov	r6, r0
 800520e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005212:	3d01      	subs	r5, #1
 8005214:	930e      	str	r3, [sp, #56]	; 0x38
 8005216:	e76a      	b.n	80050ee <_dtoa_r+0x116>
 8005218:	2301      	movs	r3, #1
 800521a:	e7b2      	b.n	8005182 <_dtoa_r+0x1aa>
 800521c:	900b      	str	r0, [sp, #44]	; 0x2c
 800521e:	e7b1      	b.n	8005184 <_dtoa_r+0x1ac>
 8005220:	9b04      	ldr	r3, [sp, #16]
 8005222:	9a00      	ldr	r2, [sp, #0]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	4253      	negs	r3, r2
 800522a:	9307      	str	r3, [sp, #28]
 800522c:	2300      	movs	r3, #0
 800522e:	930a      	str	r3, [sp, #40]	; 0x28
 8005230:	e7bf      	b.n	80051b2 <_dtoa_r+0x1da>
 8005232:	2300      	movs	r3, #0
 8005234:	9308      	str	r3, [sp, #32]
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc55      	bgt.n	80052e8 <_dtoa_r+0x310>
 800523c:	2301      	movs	r3, #1
 800523e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005242:	461a      	mov	r2, r3
 8005244:	9209      	str	r2, [sp, #36]	; 0x24
 8005246:	e00c      	b.n	8005262 <_dtoa_r+0x28a>
 8005248:	2301      	movs	r3, #1
 800524a:	e7f3      	b.n	8005234 <_dtoa_r+0x25c>
 800524c:	2300      	movs	r3, #0
 800524e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	4413      	add	r3, r2
 8005256:	9302      	str	r3, [sp, #8]
 8005258:	3301      	adds	r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	9303      	str	r3, [sp, #12]
 800525e:	bfb8      	it	lt
 8005260:	2301      	movlt	r3, #1
 8005262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005264:	2200      	movs	r2, #0
 8005266:	6042      	str	r2, [r0, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	f102 0614 	add.w	r6, r2, #20
 800526e:	429e      	cmp	r6, r3
 8005270:	6841      	ldr	r1, [r0, #4]
 8005272:	d93d      	bls.n	80052f0 <_dtoa_r+0x318>
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fcb7 	bl	8005be8 <_Balloc>
 800527a:	9001      	str	r0, [sp, #4]
 800527c:	2800      	cmp	r0, #0
 800527e:	d13b      	bne.n	80052f8 <_dtoa_r+0x320>
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <_dtoa_r+0x2f0>)
 8005282:	4602      	mov	r2, r0
 8005284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005288:	e6c0      	b.n	800500c <_dtoa_r+0x34>
 800528a:	2301      	movs	r3, #1
 800528c:	e7df      	b.n	800524e <_dtoa_r+0x276>
 800528e:	bf00      	nop
 8005290:	636f4361 	.word	0x636f4361
 8005294:	3fd287a7 	.word	0x3fd287a7
 8005298:	8b60c8b3 	.word	0x8b60c8b3
 800529c:	3fc68a28 	.word	0x3fc68a28
 80052a0:	509f79fb 	.word	0x509f79fb
 80052a4:	3fd34413 	.word	0x3fd34413
 80052a8:	080073f5 	.word	0x080073f5
 80052ac:	0800740c 	.word	0x0800740c
 80052b0:	7ff00000 	.word	0x7ff00000
 80052b4:	080073f1 	.word	0x080073f1
 80052b8:	080073e8 	.word	0x080073e8
 80052bc:	080073c5 	.word	0x080073c5
 80052c0:	3ff80000 	.word	0x3ff80000
 80052c4:	08007500 	.word	0x08007500
 80052c8:	08007467 	.word	0x08007467
 80052cc:	2501      	movs	r5, #1
 80052ce:	2300      	movs	r3, #0
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	9508      	str	r5, [sp, #32]
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	2312      	movs	r3, #18
 80052e0:	e7b0      	b.n	8005244 <_dtoa_r+0x26c>
 80052e2:	2301      	movs	r3, #1
 80052e4:	9308      	str	r3, [sp, #32]
 80052e6:	e7f5      	b.n	80052d4 <_dtoa_r+0x2fc>
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052ee:	e7b8      	b.n	8005262 <_dtoa_r+0x28a>
 80052f0:	3101      	adds	r1, #1
 80052f2:	6041      	str	r1, [r0, #4]
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	e7b8      	b.n	800526a <_dtoa_r+0x292>
 80052f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052fa:	9a01      	ldr	r2, [sp, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	2b0e      	cmp	r3, #14
 8005302:	f200 809d 	bhi.w	8005440 <_dtoa_r+0x468>
 8005306:	2d00      	cmp	r5, #0
 8005308:	f000 809a 	beq.w	8005440 <_dtoa_r+0x468>
 800530c:	9b00      	ldr	r3, [sp, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd32      	ble.n	8005378 <_dtoa_r+0x3a0>
 8005312:	4ab7      	ldr	r2, [pc, #732]	; (80055f0 <_dtoa_r+0x618>)
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800531c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005320:	9b00      	ldr	r3, [sp, #0]
 8005322:	05d8      	lsls	r0, r3, #23
 8005324:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005328:	d516      	bpl.n	8005358 <_dtoa_r+0x380>
 800532a:	4bb2      	ldr	r3, [pc, #712]	; (80055f4 <_dtoa_r+0x61c>)
 800532c:	ec51 0b19 	vmov	r0, r1, d9
 8005330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005334:	f7fb fa92 	bl	800085c <__aeabi_ddiv>
 8005338:	f007 070f 	and.w	r7, r7, #15
 800533c:	4682      	mov	sl, r0
 800533e:	468b      	mov	fp, r1
 8005340:	2503      	movs	r5, #3
 8005342:	4eac      	ldr	r6, [pc, #688]	; (80055f4 <_dtoa_r+0x61c>)
 8005344:	b957      	cbnz	r7, 800535c <_dtoa_r+0x384>
 8005346:	4642      	mov	r2, r8
 8005348:	464b      	mov	r3, r9
 800534a:	4650      	mov	r0, sl
 800534c:	4659      	mov	r1, fp
 800534e:	f7fb fa85 	bl	800085c <__aeabi_ddiv>
 8005352:	4682      	mov	sl, r0
 8005354:	468b      	mov	fp, r1
 8005356:	e028      	b.n	80053aa <_dtoa_r+0x3d2>
 8005358:	2502      	movs	r5, #2
 800535a:	e7f2      	b.n	8005342 <_dtoa_r+0x36a>
 800535c:	07f9      	lsls	r1, r7, #31
 800535e:	d508      	bpl.n	8005372 <_dtoa_r+0x39a>
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005368:	f7fb f94e 	bl	8000608 <__aeabi_dmul>
 800536c:	3501      	adds	r5, #1
 800536e:	4680      	mov	r8, r0
 8005370:	4689      	mov	r9, r1
 8005372:	107f      	asrs	r7, r7, #1
 8005374:	3608      	adds	r6, #8
 8005376:	e7e5      	b.n	8005344 <_dtoa_r+0x36c>
 8005378:	f000 809b 	beq.w	80054b2 <_dtoa_r+0x4da>
 800537c:	9b00      	ldr	r3, [sp, #0]
 800537e:	4f9d      	ldr	r7, [pc, #628]	; (80055f4 <_dtoa_r+0x61c>)
 8005380:	425e      	negs	r6, r3
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <_dtoa_r+0x618>)
 8005384:	f006 020f 	and.w	r2, r6, #15
 8005388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	ec51 0b19 	vmov	r0, r1, d9
 8005394:	f7fb f938 	bl	8000608 <__aeabi_dmul>
 8005398:	1136      	asrs	r6, r6, #4
 800539a:	4682      	mov	sl, r0
 800539c:	468b      	mov	fp, r1
 800539e:	2300      	movs	r3, #0
 80053a0:	2502      	movs	r5, #2
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	d17a      	bne.n	800549c <_dtoa_r+0x4c4>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d3      	bne.n	8005352 <_dtoa_r+0x37a>
 80053aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8082 	beq.w	80054b6 <_dtoa_r+0x4de>
 80053b2:	4b91      	ldr	r3, [pc, #580]	; (80055f8 <_dtoa_r+0x620>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	4650      	mov	r0, sl
 80053b8:	4659      	mov	r1, fp
 80053ba:	f7fb fb97 	bl	8000aec <__aeabi_dcmplt>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d079      	beq.n	80054b6 <_dtoa_r+0x4de>
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d076      	beq.n	80054b6 <_dtoa_r+0x4de>
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dd36      	ble.n	800543c <_dtoa_r+0x464>
 80053ce:	9b00      	ldr	r3, [sp, #0]
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	1e5f      	subs	r7, r3, #1
 80053d6:	2200      	movs	r2, #0
 80053d8:	4b88      	ldr	r3, [pc, #544]	; (80055fc <_dtoa_r+0x624>)
 80053da:	f7fb f915 	bl	8000608 <__aeabi_dmul>
 80053de:	9e02      	ldr	r6, [sp, #8]
 80053e0:	4682      	mov	sl, r0
 80053e2:	468b      	mov	fp, r1
 80053e4:	3501      	adds	r5, #1
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fb f8a4 	bl	8000534 <__aeabi_i2d>
 80053ec:	4652      	mov	r2, sl
 80053ee:	465b      	mov	r3, fp
 80053f0:	f7fb f90a 	bl	8000608 <__aeabi_dmul>
 80053f4:	4b82      	ldr	r3, [pc, #520]	; (8005600 <_dtoa_r+0x628>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	f7fa ff50 	bl	800029c <__adddf3>
 80053fc:	46d0      	mov	r8, sl
 80053fe:	46d9      	mov	r9, fp
 8005400:	4682      	mov	sl, r0
 8005402:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005406:	2e00      	cmp	r6, #0
 8005408:	d158      	bne.n	80054bc <_dtoa_r+0x4e4>
 800540a:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <_dtoa_r+0x62c>)
 800540c:	2200      	movs	r2, #0
 800540e:	4640      	mov	r0, r8
 8005410:	4649      	mov	r1, r9
 8005412:	f7fa ff41 	bl	8000298 <__aeabi_dsub>
 8005416:	4652      	mov	r2, sl
 8005418:	465b      	mov	r3, fp
 800541a:	4680      	mov	r8, r0
 800541c:	4689      	mov	r9, r1
 800541e:	f7fb fb83 	bl	8000b28 <__aeabi_dcmpgt>
 8005422:	2800      	cmp	r0, #0
 8005424:	f040 8295 	bne.w	8005952 <_dtoa_r+0x97a>
 8005428:	4652      	mov	r2, sl
 800542a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800542e:	4640      	mov	r0, r8
 8005430:	4649      	mov	r1, r9
 8005432:	f7fb fb5b 	bl	8000aec <__aeabi_dcmplt>
 8005436:	2800      	cmp	r0, #0
 8005438:	f040 8289 	bne.w	800594e <_dtoa_r+0x976>
 800543c:	ec5b ab19 	vmov	sl, fp, d9
 8005440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005442:	2b00      	cmp	r3, #0
 8005444:	f2c0 8148 	blt.w	80056d8 <_dtoa_r+0x700>
 8005448:	9a00      	ldr	r2, [sp, #0]
 800544a:	2a0e      	cmp	r2, #14
 800544c:	f300 8144 	bgt.w	80056d8 <_dtoa_r+0x700>
 8005450:	4b67      	ldr	r3, [pc, #412]	; (80055f0 <_dtoa_r+0x618>)
 8005452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005456:	e9d3 8900 	ldrd	r8, r9, [r3]
 800545a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	f280 80d5 	bge.w	800560c <_dtoa_r+0x634>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f300 80d1 	bgt.w	800560c <_dtoa_r+0x634>
 800546a:	f040 826f 	bne.w	800594c <_dtoa_r+0x974>
 800546e:	4b65      	ldr	r3, [pc, #404]	; (8005604 <_dtoa_r+0x62c>)
 8005470:	2200      	movs	r2, #0
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	f7fb f8c7 	bl	8000608 <__aeabi_dmul>
 800547a:	4652      	mov	r2, sl
 800547c:	465b      	mov	r3, fp
 800547e:	f7fb fb49 	bl	8000b14 <__aeabi_dcmpge>
 8005482:	9e03      	ldr	r6, [sp, #12]
 8005484:	4637      	mov	r7, r6
 8005486:	2800      	cmp	r0, #0
 8005488:	f040 8245 	bne.w	8005916 <_dtoa_r+0x93e>
 800548c:	9d01      	ldr	r5, [sp, #4]
 800548e:	2331      	movs	r3, #49	; 0x31
 8005490:	f805 3b01 	strb.w	r3, [r5], #1
 8005494:	9b00      	ldr	r3, [sp, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	e240      	b.n	800591e <_dtoa_r+0x946>
 800549c:	07f2      	lsls	r2, r6, #31
 800549e:	d505      	bpl.n	80054ac <_dtoa_r+0x4d4>
 80054a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a4:	f7fb f8b0 	bl	8000608 <__aeabi_dmul>
 80054a8:	3501      	adds	r5, #1
 80054aa:	2301      	movs	r3, #1
 80054ac:	1076      	asrs	r6, r6, #1
 80054ae:	3708      	adds	r7, #8
 80054b0:	e777      	b.n	80053a2 <_dtoa_r+0x3ca>
 80054b2:	2502      	movs	r5, #2
 80054b4:	e779      	b.n	80053aa <_dtoa_r+0x3d2>
 80054b6:	9f00      	ldr	r7, [sp, #0]
 80054b8:	9e03      	ldr	r6, [sp, #12]
 80054ba:	e794      	b.n	80053e6 <_dtoa_r+0x40e>
 80054bc:	9901      	ldr	r1, [sp, #4]
 80054be:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <_dtoa_r+0x618>)
 80054c0:	4431      	add	r1, r6
 80054c2:	910d      	str	r1, [sp, #52]	; 0x34
 80054c4:	9908      	ldr	r1, [sp, #32]
 80054c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d043      	beq.n	800555a <_dtoa_r+0x582>
 80054d2:	494d      	ldr	r1, [pc, #308]	; (8005608 <_dtoa_r+0x630>)
 80054d4:	2000      	movs	r0, #0
 80054d6:	f7fb f9c1 	bl	800085c <__aeabi_ddiv>
 80054da:	4652      	mov	r2, sl
 80054dc:	465b      	mov	r3, fp
 80054de:	f7fa fedb 	bl	8000298 <__aeabi_dsub>
 80054e2:	9d01      	ldr	r5, [sp, #4]
 80054e4:	4682      	mov	sl, r0
 80054e6:	468b      	mov	fp, r1
 80054e8:	4649      	mov	r1, r9
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7fb fb3c 	bl	8000b68 <__aeabi_d2iz>
 80054f0:	4606      	mov	r6, r0
 80054f2:	f7fb f81f 	bl	8000534 <__aeabi_i2d>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fa fecb 	bl	8000298 <__aeabi_dsub>
 8005502:	3630      	adds	r6, #48	; 0x30
 8005504:	f805 6b01 	strb.w	r6, [r5], #1
 8005508:	4652      	mov	r2, sl
 800550a:	465b      	mov	r3, fp
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
 8005510:	f7fb faec 	bl	8000aec <__aeabi_dcmplt>
 8005514:	2800      	cmp	r0, #0
 8005516:	d163      	bne.n	80055e0 <_dtoa_r+0x608>
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	4936      	ldr	r1, [pc, #216]	; (80055f8 <_dtoa_r+0x620>)
 800551e:	2000      	movs	r0, #0
 8005520:	f7fa feba 	bl	8000298 <__aeabi_dsub>
 8005524:	4652      	mov	r2, sl
 8005526:	465b      	mov	r3, fp
 8005528:	f7fb fae0 	bl	8000aec <__aeabi_dcmplt>
 800552c:	2800      	cmp	r0, #0
 800552e:	f040 80b5 	bne.w	800569c <_dtoa_r+0x6c4>
 8005532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005534:	429d      	cmp	r5, r3
 8005536:	d081      	beq.n	800543c <_dtoa_r+0x464>
 8005538:	4b30      	ldr	r3, [pc, #192]	; (80055fc <_dtoa_r+0x624>)
 800553a:	2200      	movs	r2, #0
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	f7fb f862 	bl	8000608 <__aeabi_dmul>
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <_dtoa_r+0x624>)
 8005546:	4682      	mov	sl, r0
 8005548:	468b      	mov	fp, r1
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	2200      	movs	r2, #0
 8005550:	f7fb f85a 	bl	8000608 <__aeabi_dmul>
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	e7c6      	b.n	80054e8 <_dtoa_r+0x510>
 800555a:	4650      	mov	r0, sl
 800555c:	4659      	mov	r1, fp
 800555e:	f7fb f853 	bl	8000608 <__aeabi_dmul>
 8005562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005564:	9d01      	ldr	r5, [sp, #4]
 8005566:	930f      	str	r3, [sp, #60]	; 0x3c
 8005568:	4682      	mov	sl, r0
 800556a:	468b      	mov	fp, r1
 800556c:	4649      	mov	r1, r9
 800556e:	4640      	mov	r0, r8
 8005570:	f7fb fafa 	bl	8000b68 <__aeabi_d2iz>
 8005574:	4606      	mov	r6, r0
 8005576:	f7fa ffdd 	bl	8000534 <__aeabi_i2d>
 800557a:	3630      	adds	r6, #48	; 0x30
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f7fa fe88 	bl	8000298 <__aeabi_dsub>
 8005588:	f805 6b01 	strb.w	r6, [r5], #1
 800558c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800558e:	429d      	cmp	r5, r3
 8005590:	4680      	mov	r8, r0
 8005592:	4689      	mov	r9, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	d124      	bne.n	80055e4 <_dtoa_r+0x60c>
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <_dtoa_r+0x630>)
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	f7fa fe7c 	bl	800029c <__adddf3>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fb fabc 	bl	8000b28 <__aeabi_dcmpgt>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d173      	bne.n	800569c <_dtoa_r+0x6c4>
 80055b4:	4652      	mov	r2, sl
 80055b6:	465b      	mov	r3, fp
 80055b8:	4913      	ldr	r1, [pc, #76]	; (8005608 <_dtoa_r+0x630>)
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fa fe6c 	bl	8000298 <__aeabi_dsub>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4640      	mov	r0, r8
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fb fa90 	bl	8000aec <__aeabi_dcmplt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f43f af35 	beq.w	800543c <_dtoa_r+0x464>
 80055d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055d4:	1e6b      	subs	r3, r5, #1
 80055d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d0f8      	beq.n	80055d2 <_dtoa_r+0x5fa>
 80055e0:	9700      	str	r7, [sp, #0]
 80055e2:	e049      	b.n	8005678 <_dtoa_r+0x6a0>
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <_dtoa_r+0x624>)
 80055e6:	f7fb f80f 	bl	8000608 <__aeabi_dmul>
 80055ea:	4680      	mov	r8, r0
 80055ec:	4689      	mov	r9, r1
 80055ee:	e7bd      	b.n	800556c <_dtoa_r+0x594>
 80055f0:	08007500 	.word	0x08007500
 80055f4:	080074d8 	.word	0x080074d8
 80055f8:	3ff00000 	.word	0x3ff00000
 80055fc:	40240000 	.word	0x40240000
 8005600:	401c0000 	.word	0x401c0000
 8005604:	40140000 	.word	0x40140000
 8005608:	3fe00000 	.word	0x3fe00000
 800560c:	9d01      	ldr	r5, [sp, #4]
 800560e:	4656      	mov	r6, sl
 8005610:	465f      	mov	r7, fp
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	4630      	mov	r0, r6
 8005618:	4639      	mov	r1, r7
 800561a:	f7fb f91f 	bl	800085c <__aeabi_ddiv>
 800561e:	f7fb faa3 	bl	8000b68 <__aeabi_d2iz>
 8005622:	4682      	mov	sl, r0
 8005624:	f7fa ff86 	bl	8000534 <__aeabi_i2d>
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	f7fa ffec 	bl	8000608 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800563c:	f7fa fe2c 	bl	8000298 <__aeabi_dsub>
 8005640:	f805 6b01 	strb.w	r6, [r5], #1
 8005644:	9e01      	ldr	r6, [sp, #4]
 8005646:	9f03      	ldr	r7, [sp, #12]
 8005648:	1bae      	subs	r6, r5, r6
 800564a:	42b7      	cmp	r7, r6
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	d135      	bne.n	80056be <_dtoa_r+0x6e6>
 8005652:	f7fa fe23 	bl	800029c <__adddf3>
 8005656:	4642      	mov	r2, r8
 8005658:	464b      	mov	r3, r9
 800565a:	4606      	mov	r6, r0
 800565c:	460f      	mov	r7, r1
 800565e:	f7fb fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8005662:	b9d0      	cbnz	r0, 800569a <_dtoa_r+0x6c2>
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4630      	mov	r0, r6
 800566a:	4639      	mov	r1, r7
 800566c:	f7fb fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8005670:	b110      	cbz	r0, 8005678 <_dtoa_r+0x6a0>
 8005672:	f01a 0f01 	tst.w	sl, #1
 8005676:	d110      	bne.n	800569a <_dtoa_r+0x6c2>
 8005678:	4620      	mov	r0, r4
 800567a:	ee18 1a10 	vmov	r1, s16
 800567e:	f000 faf3 	bl	8005c68 <_Bfree>
 8005682:	2300      	movs	r3, #0
 8005684:	9800      	ldr	r0, [sp, #0]
 8005686:	702b      	strb	r3, [r5, #0]
 8005688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800568a:	3001      	adds	r0, #1
 800568c:	6018      	str	r0, [r3, #0]
 800568e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005690:	2b00      	cmp	r3, #0
 8005692:	f43f acf1 	beq.w	8005078 <_dtoa_r+0xa0>
 8005696:	601d      	str	r5, [r3, #0]
 8005698:	e4ee      	b.n	8005078 <_dtoa_r+0xa0>
 800569a:	9f00      	ldr	r7, [sp, #0]
 800569c:	462b      	mov	r3, r5
 800569e:	461d      	mov	r5, r3
 80056a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a4:	2a39      	cmp	r2, #57	; 0x39
 80056a6:	d106      	bne.n	80056b6 <_dtoa_r+0x6de>
 80056a8:	9a01      	ldr	r2, [sp, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d1f7      	bne.n	800569e <_dtoa_r+0x6c6>
 80056ae:	9901      	ldr	r1, [sp, #4]
 80056b0:	2230      	movs	r2, #48	; 0x30
 80056b2:	3701      	adds	r7, #1
 80056b4:	700a      	strb	r2, [r1, #0]
 80056b6:	781a      	ldrb	r2, [r3, #0]
 80056b8:	3201      	adds	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e790      	b.n	80055e0 <_dtoa_r+0x608>
 80056be:	4ba6      	ldr	r3, [pc, #664]	; (8005958 <_dtoa_r+0x980>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	f7fa ffa1 	bl	8000608 <__aeabi_dmul>
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	f7fb fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d09d      	beq.n	8005612 <_dtoa_r+0x63a>
 80056d6:	e7cf      	b.n	8005678 <_dtoa_r+0x6a0>
 80056d8:	9a08      	ldr	r2, [sp, #32]
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 80d7 	beq.w	800588e <_dtoa_r+0x8b6>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	f300 80ba 	bgt.w	800585c <_dtoa_r+0x884>
 80056e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	f000 80b2 	beq.w	8005854 <_dtoa_r+0x87c>
 80056f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056f4:	9e07      	ldr	r6, [sp, #28]
 80056f6:	9d04      	ldr	r5, [sp, #16]
 80056f8:	9a04      	ldr	r2, [sp, #16]
 80056fa:	441a      	add	r2, r3
 80056fc:	9204      	str	r2, [sp, #16]
 80056fe:	9a05      	ldr	r2, [sp, #20]
 8005700:	2101      	movs	r1, #1
 8005702:	441a      	add	r2, r3
 8005704:	4620      	mov	r0, r4
 8005706:	9205      	str	r2, [sp, #20]
 8005708:	f000 fb66 	bl	8005dd8 <__i2b>
 800570c:	4607      	mov	r7, r0
 800570e:	2d00      	cmp	r5, #0
 8005710:	dd0c      	ble.n	800572c <_dtoa_r+0x754>
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd09      	ble.n	800572c <_dtoa_r+0x754>
 8005718:	42ab      	cmp	r3, r5
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	bfa8      	it	ge
 800571e:	462b      	movge	r3, r5
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	9204      	str	r2, [sp, #16]
 8005724:	9a05      	ldr	r2, [sp, #20]
 8005726:	1aed      	subs	r5, r5, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	b31b      	cbz	r3, 8005778 <_dtoa_r+0x7a0>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80af 	beq.w	8005896 <_dtoa_r+0x8be>
 8005738:	2e00      	cmp	r6, #0
 800573a:	dd13      	ble.n	8005764 <_dtoa_r+0x78c>
 800573c:	4639      	mov	r1, r7
 800573e:	4632      	mov	r2, r6
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fc09 	bl	8005f58 <__pow5mult>
 8005746:	ee18 2a10 	vmov	r2, s16
 800574a:	4601      	mov	r1, r0
 800574c:	4607      	mov	r7, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fb58 	bl	8005e04 <__multiply>
 8005754:	ee18 1a10 	vmov	r1, s16
 8005758:	4680      	mov	r8, r0
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fa84 	bl	8005c68 <_Bfree>
 8005760:	ee08 8a10 	vmov	s16, r8
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	1b9a      	subs	r2, r3, r6
 8005768:	d006      	beq.n	8005778 <_dtoa_r+0x7a0>
 800576a:	ee18 1a10 	vmov	r1, s16
 800576e:	4620      	mov	r0, r4
 8005770:	f000 fbf2 	bl	8005f58 <__pow5mult>
 8005774:	ee08 0a10 	vmov	s16, r0
 8005778:	2101      	movs	r1, #1
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fb2c 	bl	8005dd8 <__i2b>
 8005780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	4606      	mov	r6, r0
 8005786:	f340 8088 	ble.w	800589a <_dtoa_r+0x8c2>
 800578a:	461a      	mov	r2, r3
 800578c:	4601      	mov	r1, r0
 800578e:	4620      	mov	r0, r4
 8005790:	f000 fbe2 	bl	8005f58 <__pow5mult>
 8005794:	9b06      	ldr	r3, [sp, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	4606      	mov	r6, r0
 800579a:	f340 8081 	ble.w	80058a0 <_dtoa_r+0x8c8>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	6933      	ldr	r3, [r6, #16]
 80057a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057a8:	6918      	ldr	r0, [r3, #16]
 80057aa:	f000 fac5 	bl	8005d38 <__hi0bits>
 80057ae:	f1c0 0020 	rsb	r0, r0, #32
 80057b2:	9b05      	ldr	r3, [sp, #20]
 80057b4:	4418      	add	r0, r3
 80057b6:	f010 001f 	ands.w	r0, r0, #31
 80057ba:	f000 8092 	beq.w	80058e2 <_dtoa_r+0x90a>
 80057be:	f1c0 0320 	rsb	r3, r0, #32
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	f340 808a 	ble.w	80058dc <_dtoa_r+0x904>
 80057c8:	f1c0 001c 	rsb	r0, r0, #28
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	4403      	add	r3, r0
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	4403      	add	r3, r0
 80057d6:	4405      	add	r5, r0
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	9b04      	ldr	r3, [sp, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd07      	ble.n	80057f0 <_dtoa_r+0x818>
 80057e0:	ee18 1a10 	vmov	r1, s16
 80057e4:	461a      	mov	r2, r3
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 fc10 	bl	800600c <__lshift>
 80057ec:	ee08 0a10 	vmov	s16, r0
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dd05      	ble.n	8005802 <_dtoa_r+0x82a>
 80057f6:	4631      	mov	r1, r6
 80057f8:	461a      	mov	r2, r3
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fc06 	bl	800600c <__lshift>
 8005800:	4606      	mov	r6, r0
 8005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d06e      	beq.n	80058e6 <_dtoa_r+0x90e>
 8005808:	ee18 0a10 	vmov	r0, s16
 800580c:	4631      	mov	r1, r6
 800580e:	f000 fc6d 	bl	80060ec <__mcmp>
 8005812:	2800      	cmp	r0, #0
 8005814:	da67      	bge.n	80058e6 <_dtoa_r+0x90e>
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	ee18 1a10 	vmov	r1, s16
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	220a      	movs	r2, #10
 8005822:	2300      	movs	r3, #0
 8005824:	4620      	mov	r0, r4
 8005826:	f000 fa41 	bl	8005cac <__multadd>
 800582a:	9b08      	ldr	r3, [sp, #32]
 800582c:	ee08 0a10 	vmov	s16, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81b1 	beq.w	8005b98 <_dtoa_r+0xbc0>
 8005836:	2300      	movs	r3, #0
 8005838:	4639      	mov	r1, r7
 800583a:	220a      	movs	r2, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f000 fa35 	bl	8005cac <__multadd>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	4607      	mov	r7, r0
 8005848:	f300 808e 	bgt.w	8005968 <_dtoa_r+0x990>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	2b02      	cmp	r3, #2
 8005850:	dc51      	bgt.n	80058f6 <_dtoa_r+0x91e>
 8005852:	e089      	b.n	8005968 <_dtoa_r+0x990>
 8005854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800585a:	e74b      	b.n	80056f4 <_dtoa_r+0x71c>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	1e5e      	subs	r6, r3, #1
 8005860:	9b07      	ldr	r3, [sp, #28]
 8005862:	42b3      	cmp	r3, r6
 8005864:	bfbf      	itttt	lt
 8005866:	9b07      	ldrlt	r3, [sp, #28]
 8005868:	9607      	strlt	r6, [sp, #28]
 800586a:	1af2      	sublt	r2, r6, r3
 800586c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800586e:	bfb6      	itet	lt
 8005870:	189b      	addlt	r3, r3, r2
 8005872:	1b9e      	subge	r6, r3, r6
 8005874:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	bfb8      	it	lt
 800587a:	2600      	movlt	r6, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	bfb7      	itett	lt
 8005880:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005884:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005888:	1a9d      	sublt	r5, r3, r2
 800588a:	2300      	movlt	r3, #0
 800588c:	e734      	b.n	80056f8 <_dtoa_r+0x720>
 800588e:	9e07      	ldr	r6, [sp, #28]
 8005890:	9d04      	ldr	r5, [sp, #16]
 8005892:	9f08      	ldr	r7, [sp, #32]
 8005894:	e73b      	b.n	800570e <_dtoa_r+0x736>
 8005896:	9a07      	ldr	r2, [sp, #28]
 8005898:	e767      	b.n	800576a <_dtoa_r+0x792>
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	2b01      	cmp	r3, #1
 800589e:	dc18      	bgt.n	80058d2 <_dtoa_r+0x8fa>
 80058a0:	f1ba 0f00 	cmp.w	sl, #0
 80058a4:	d115      	bne.n	80058d2 <_dtoa_r+0x8fa>
 80058a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058aa:	b993      	cbnz	r3, 80058d2 <_dtoa_r+0x8fa>
 80058ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058b0:	0d1b      	lsrs	r3, r3, #20
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	b183      	cbz	r3, 80058d8 <_dtoa_r+0x900>
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	3301      	adds	r3, #1
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	9b05      	ldr	r3, [sp, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	f04f 0801 	mov.w	r8, #1
 80058c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af6a 	bne.w	80057a2 <_dtoa_r+0x7ca>
 80058ce:	2001      	movs	r0, #1
 80058d0:	e76f      	b.n	80057b2 <_dtoa_r+0x7da>
 80058d2:	f04f 0800 	mov.w	r8, #0
 80058d6:	e7f6      	b.n	80058c6 <_dtoa_r+0x8ee>
 80058d8:	4698      	mov	r8, r3
 80058da:	e7f4      	b.n	80058c6 <_dtoa_r+0x8ee>
 80058dc:	f43f af7d 	beq.w	80057da <_dtoa_r+0x802>
 80058e0:	4618      	mov	r0, r3
 80058e2:	301c      	adds	r0, #28
 80058e4:	e772      	b.n	80057cc <_dtoa_r+0x7f4>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc37      	bgt.n	800595c <_dtoa_r+0x984>
 80058ec:	9b06      	ldr	r3, [sp, #24]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	dd34      	ble.n	800595c <_dtoa_r+0x984>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	b96b      	cbnz	r3, 8005916 <_dtoa_r+0x93e>
 80058fa:	4631      	mov	r1, r6
 80058fc:	2205      	movs	r2, #5
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 f9d4 	bl	8005cac <__multadd>
 8005904:	4601      	mov	r1, r0
 8005906:	4606      	mov	r6, r0
 8005908:	ee18 0a10 	vmov	r0, s16
 800590c:	f000 fbee 	bl	80060ec <__mcmp>
 8005910:	2800      	cmp	r0, #0
 8005912:	f73f adbb 	bgt.w	800548c <_dtoa_r+0x4b4>
 8005916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005918:	9d01      	ldr	r5, [sp, #4]
 800591a:	43db      	mvns	r3, r3
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	4631      	mov	r1, r6
 8005924:	4620      	mov	r0, r4
 8005926:	f000 f99f 	bl	8005c68 <_Bfree>
 800592a:	2f00      	cmp	r7, #0
 800592c:	f43f aea4 	beq.w	8005678 <_dtoa_r+0x6a0>
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	d005      	beq.n	8005942 <_dtoa_r+0x96a>
 8005936:	45b8      	cmp	r8, r7
 8005938:	d003      	beq.n	8005942 <_dtoa_r+0x96a>
 800593a:	4641      	mov	r1, r8
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f993 	bl	8005c68 <_Bfree>
 8005942:	4639      	mov	r1, r7
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f98f 	bl	8005c68 <_Bfree>
 800594a:	e695      	b.n	8005678 <_dtoa_r+0x6a0>
 800594c:	2600      	movs	r6, #0
 800594e:	4637      	mov	r7, r6
 8005950:	e7e1      	b.n	8005916 <_dtoa_r+0x93e>
 8005952:	9700      	str	r7, [sp, #0]
 8005954:	4637      	mov	r7, r6
 8005956:	e599      	b.n	800548c <_dtoa_r+0x4b4>
 8005958:	40240000 	.word	0x40240000
 800595c:	9b08      	ldr	r3, [sp, #32]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80ca 	beq.w	8005af8 <_dtoa_r+0xb20>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	2d00      	cmp	r5, #0
 800596a:	dd05      	ble.n	8005978 <_dtoa_r+0x9a0>
 800596c:	4639      	mov	r1, r7
 800596e:	462a      	mov	r2, r5
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fb4b 	bl	800600c <__lshift>
 8005976:	4607      	mov	r7, r0
 8005978:	f1b8 0f00 	cmp.w	r8, #0
 800597c:	d05b      	beq.n	8005a36 <_dtoa_r+0xa5e>
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4620      	mov	r0, r4
 8005982:	f000 f931 	bl	8005be8 <_Balloc>
 8005986:	4605      	mov	r5, r0
 8005988:	b928      	cbnz	r0, 8005996 <_dtoa_r+0x9be>
 800598a:	4b87      	ldr	r3, [pc, #540]	; (8005ba8 <_dtoa_r+0xbd0>)
 800598c:	4602      	mov	r2, r0
 800598e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005992:	f7ff bb3b 	b.w	800500c <_dtoa_r+0x34>
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	3202      	adds	r2, #2
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	f107 010c 	add.w	r1, r7, #12
 80059a0:	300c      	adds	r0, #12
 80059a2:	f000 f913 	bl	8005bcc <memcpy>
 80059a6:	2201      	movs	r2, #1
 80059a8:	4629      	mov	r1, r5
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fb2e 	bl	800600c <__lshift>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f103 0901 	add.w	r9, r3, #1
 80059b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	f00a 0301 	and.w	r3, sl, #1
 80059c2:	46b8      	mov	r8, r7
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	4607      	mov	r7, r0
 80059c8:	4631      	mov	r1, r6
 80059ca:	ee18 0a10 	vmov	r0, s16
 80059ce:	f7ff fa77 	bl	8004ec0 <quorem>
 80059d2:	4641      	mov	r1, r8
 80059d4:	9002      	str	r0, [sp, #8]
 80059d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059da:	ee18 0a10 	vmov	r0, s16
 80059de:	f000 fb85 	bl	80060ec <__mcmp>
 80059e2:	463a      	mov	r2, r7
 80059e4:	9003      	str	r0, [sp, #12]
 80059e6:	4631      	mov	r1, r6
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fb9b 	bl	8006124 <__mdiff>
 80059ee:	68c2      	ldr	r2, [r0, #12]
 80059f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80059f4:	4605      	mov	r5, r0
 80059f6:	bb02      	cbnz	r2, 8005a3a <_dtoa_r+0xa62>
 80059f8:	4601      	mov	r1, r0
 80059fa:	ee18 0a10 	vmov	r0, s16
 80059fe:	f000 fb75 	bl	80060ec <__mcmp>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	9207      	str	r2, [sp, #28]
 8005a0a:	f000 f92d 	bl	8005c68 <_Bfree>
 8005a0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005a12:	ea43 0102 	orr.w	r1, r3, r2
 8005a16:	9b04      	ldr	r3, [sp, #16]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	464d      	mov	r5, r9
 8005a1c:	d10f      	bne.n	8005a3e <_dtoa_r+0xa66>
 8005a1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a22:	d02a      	beq.n	8005a7a <_dtoa_r+0xaa2>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd02      	ble.n	8005a30 <_dtoa_r+0xa58>
 8005a2a:	9b02      	ldr	r3, [sp, #8]
 8005a2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005a30:	f88b a000 	strb.w	sl, [fp]
 8005a34:	e775      	b.n	8005922 <_dtoa_r+0x94a>
 8005a36:	4638      	mov	r0, r7
 8005a38:	e7ba      	b.n	80059b0 <_dtoa_r+0x9d8>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	e7e2      	b.n	8005a04 <_dtoa_r+0xa2c>
 8005a3e:	9b03      	ldr	r3, [sp, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db04      	blt.n	8005a4e <_dtoa_r+0xa76>
 8005a44:	9906      	ldr	r1, [sp, #24]
 8005a46:	430b      	orrs	r3, r1
 8005a48:	9904      	ldr	r1, [sp, #16]
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	d122      	bne.n	8005a94 <_dtoa_r+0xabc>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	ddee      	ble.n	8005a30 <_dtoa_r+0xa58>
 8005a52:	ee18 1a10 	vmov	r1, s16
 8005a56:	2201      	movs	r2, #1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 fad7 	bl	800600c <__lshift>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	ee08 0a10 	vmov	s16, r0
 8005a64:	f000 fb42 	bl	80060ec <__mcmp>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	dc03      	bgt.n	8005a74 <_dtoa_r+0xa9c>
 8005a6c:	d1e0      	bne.n	8005a30 <_dtoa_r+0xa58>
 8005a6e:	f01a 0f01 	tst.w	sl, #1
 8005a72:	d0dd      	beq.n	8005a30 <_dtoa_r+0xa58>
 8005a74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a78:	d1d7      	bne.n	8005a2a <_dtoa_r+0xa52>
 8005a7a:	2339      	movs	r3, #57	; 0x39
 8005a7c:	f88b 3000 	strb.w	r3, [fp]
 8005a80:	462b      	mov	r3, r5
 8005a82:	461d      	mov	r5, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a8a:	2a39      	cmp	r2, #57	; 0x39
 8005a8c:	d071      	beq.n	8005b72 <_dtoa_r+0xb9a>
 8005a8e:	3201      	adds	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e746      	b.n	8005922 <_dtoa_r+0x94a>
 8005a94:	2a00      	cmp	r2, #0
 8005a96:	dd07      	ble.n	8005aa8 <_dtoa_r+0xad0>
 8005a98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a9c:	d0ed      	beq.n	8005a7a <_dtoa_r+0xaa2>
 8005a9e:	f10a 0301 	add.w	r3, sl, #1
 8005aa2:	f88b 3000 	strb.w	r3, [fp]
 8005aa6:	e73c      	b.n	8005922 <_dtoa_r+0x94a>
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005aae:	4599      	cmp	r9, r3
 8005ab0:	d047      	beq.n	8005b42 <_dtoa_r+0xb6a>
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	220a      	movs	r2, #10
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f8f6 	bl	8005cac <__multadd>
 8005ac0:	45b8      	cmp	r8, r7
 8005ac2:	ee08 0a10 	vmov	s16, r0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	f04f 020a 	mov.w	r2, #10
 8005ace:	4641      	mov	r1, r8
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	d106      	bne.n	8005ae2 <_dtoa_r+0xb0a>
 8005ad4:	f000 f8ea 	bl	8005cac <__multadd>
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4607      	mov	r7, r0
 8005adc:	f109 0901 	add.w	r9, r9, #1
 8005ae0:	e772      	b.n	80059c8 <_dtoa_r+0x9f0>
 8005ae2:	f000 f8e3 	bl	8005cac <__multadd>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4680      	mov	r8, r0
 8005aea:	2300      	movs	r3, #0
 8005aec:	220a      	movs	r2, #10
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f8dc 	bl	8005cac <__multadd>
 8005af4:	4607      	mov	r7, r0
 8005af6:	e7f1      	b.n	8005adc <_dtoa_r+0xb04>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	9302      	str	r3, [sp, #8]
 8005afc:	9d01      	ldr	r5, [sp, #4]
 8005afe:	ee18 0a10 	vmov	r0, s16
 8005b02:	4631      	mov	r1, r6
 8005b04:	f7ff f9dc 	bl	8004ec0 <quorem>
 8005b08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	f805 ab01 	strb.w	sl, [r5], #1
 8005b12:	1aea      	subs	r2, r5, r3
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	dd09      	ble.n	8005b2e <_dtoa_r+0xb56>
 8005b1a:	ee18 1a10 	vmov	r1, s16
 8005b1e:	2300      	movs	r3, #0
 8005b20:	220a      	movs	r2, #10
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f8c2 	bl	8005cac <__multadd>
 8005b28:	ee08 0a10 	vmov	s16, r0
 8005b2c:	e7e7      	b.n	8005afe <_dtoa_r+0xb26>
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bfc8      	it	gt
 8005b34:	461d      	movgt	r5, r3
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	bfd8      	it	le
 8005b3a:	2501      	movle	r5, #1
 8005b3c:	441d      	add	r5, r3
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	ee18 1a10 	vmov	r1, s16
 8005b46:	2201      	movs	r2, #1
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fa5f 	bl	800600c <__lshift>
 8005b4e:	4631      	mov	r1, r6
 8005b50:	ee08 0a10 	vmov	s16, r0
 8005b54:	f000 faca 	bl	80060ec <__mcmp>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dc91      	bgt.n	8005a80 <_dtoa_r+0xaa8>
 8005b5c:	d102      	bne.n	8005b64 <_dtoa_r+0xb8c>
 8005b5e:	f01a 0f01 	tst.w	sl, #1
 8005b62:	d18d      	bne.n	8005a80 <_dtoa_r+0xaa8>
 8005b64:	462b      	mov	r3, r5
 8005b66:	461d      	mov	r5, r3
 8005b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b6c:	2a30      	cmp	r2, #48	; 0x30
 8005b6e:	d0fa      	beq.n	8005b66 <_dtoa_r+0xb8e>
 8005b70:	e6d7      	b.n	8005922 <_dtoa_r+0x94a>
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d184      	bne.n	8005a82 <_dtoa_r+0xaaa>
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2331      	movs	r3, #49	; 0x31
 8005b80:	7013      	strb	r3, [r2, #0]
 8005b82:	e6ce      	b.n	8005922 <_dtoa_r+0x94a>
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <_dtoa_r+0xbd4>)
 8005b86:	f7ff ba95 	b.w	80050b4 <_dtoa_r+0xdc>
 8005b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f47f aa6e 	bne.w	800506e <_dtoa_r+0x96>
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <_dtoa_r+0xbd8>)
 8005b94:	f7ff ba8e 	b.w	80050b4 <_dtoa_r+0xdc>
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dcae      	bgt.n	8005afc <_dtoa_r+0xb24>
 8005b9e:	9b06      	ldr	r3, [sp, #24]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	f73f aea8 	bgt.w	80058f6 <_dtoa_r+0x91e>
 8005ba6:	e7a9      	b.n	8005afc <_dtoa_r+0xb24>
 8005ba8:	08007467 	.word	0x08007467
 8005bac:	080073c4 	.word	0x080073c4
 8005bb0:	080073e8 	.word	0x080073e8

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000160 	.word	0x20000160

08005bbc <malloc>:
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <malloc+0xc>)
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	f000 bc17 	b.w	80063f4 <_malloc_r>
 8005bc6:	bf00      	nop
 8005bc8:	2000000c 	.word	0x2000000c

08005bcc <memcpy>:
 8005bcc:	440a      	add	r2, r1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd4:	d100      	bne.n	8005bd8 <memcpy+0xc>
 8005bd6:	4770      	bx	lr
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be2:	4291      	cmp	r1, r2
 8005be4:	d1f9      	bne.n	8005bda <memcpy+0xe>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <_Balloc>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bec:	4604      	mov	r4, r0
 8005bee:	460d      	mov	r5, r1
 8005bf0:	b976      	cbnz	r6, 8005c10 <_Balloc+0x28>
 8005bf2:	2010      	movs	r0, #16
 8005bf4:	f7ff ffe2 	bl	8005bbc <malloc>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8005bfc:	b920      	cbnz	r0, 8005c08 <_Balloc+0x20>
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <_Balloc+0x78>)
 8005c00:	4818      	ldr	r0, [pc, #96]	; (8005c64 <_Balloc+0x7c>)
 8005c02:	2166      	movs	r1, #102	; 0x66
 8005c04:	f000 fdd6 	bl	80067b4 <__assert_func>
 8005c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c0c:	6006      	str	r6, [r0, #0]
 8005c0e:	60c6      	str	r6, [r0, #12]
 8005c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c12:	68f3      	ldr	r3, [r6, #12]
 8005c14:	b183      	cbz	r3, 8005c38 <_Balloc+0x50>
 8005c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c1e:	b9b8      	cbnz	r0, 8005c50 <_Balloc+0x68>
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f605 	lsl.w	r6, r1, r5
 8005c26:	1d72      	adds	r2, r6, #5
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fb60 	bl	80062f0 <_calloc_r>
 8005c30:	b160      	cbz	r0, 8005c4c <_Balloc+0x64>
 8005c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c36:	e00e      	b.n	8005c56 <_Balloc+0x6e>
 8005c38:	2221      	movs	r2, #33	; 0x21
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fb57 	bl	80062f0 <_calloc_r>
 8005c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c44:	60f0      	str	r0, [r6, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e4      	bne.n	8005c16 <_Balloc+0x2e>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	6802      	ldr	r2, [r0, #0]
 8005c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c56:	2300      	movs	r3, #0
 8005c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c5c:	e7f7      	b.n	8005c4e <_Balloc+0x66>
 8005c5e:	bf00      	nop
 8005c60:	080073f5 	.word	0x080073f5
 8005c64:	08007478 	.word	0x08007478

08005c68 <_Bfree>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	b976      	cbnz	r6, 8005c90 <_Bfree+0x28>
 8005c72:	2010      	movs	r0, #16
 8005c74:	f7ff ffa2 	bl	8005bbc <malloc>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8005c7c:	b920      	cbnz	r0, 8005c88 <_Bfree+0x20>
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <_Bfree+0x3c>)
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <_Bfree+0x40>)
 8005c82:	218a      	movs	r1, #138	; 0x8a
 8005c84:	f000 fd96 	bl	80067b4 <__assert_func>
 8005c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c8c:	6006      	str	r6, [r0, #0]
 8005c8e:	60c6      	str	r6, [r0, #12]
 8005c90:	b13c      	cbz	r4, 8005ca2 <_Bfree+0x3a>
 8005c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c94:	6862      	ldr	r2, [r4, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c9c:	6021      	str	r1, [r4, #0]
 8005c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	080073f5 	.word	0x080073f5
 8005ca8:	08007478 	.word	0x08007478

08005cac <__multadd>:
 8005cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb0:	690d      	ldr	r5, [r1, #16]
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	461e      	mov	r6, r3
 8005cb8:	f101 0c14 	add.w	ip, r1, #20
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8005cc8:	0c1e      	lsrs	r6, r3, #16
 8005cca:	0c0b      	lsrs	r3, r1, #16
 8005ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8005cd0:	b289      	uxth	r1, r1
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cd8:	4285      	cmp	r5, r0
 8005cda:	f84c 1b04 	str.w	r1, [ip], #4
 8005cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ce2:	dcec      	bgt.n	8005cbe <__multadd+0x12>
 8005ce4:	b30e      	cbz	r6, 8005d2a <__multadd+0x7e>
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	dc19      	bgt.n	8005d20 <__multadd+0x74>
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	4638      	mov	r0, r7
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	f7ff ff79 	bl	8005be8 <_Balloc>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	b928      	cbnz	r0, 8005d06 <__multadd+0x5a>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <__multadd+0x84>)
 8005cfe:	480d      	ldr	r0, [pc, #52]	; (8005d34 <__multadd+0x88>)
 8005d00:	21b5      	movs	r1, #181	; 0xb5
 8005d02:	f000 fd57 	bl	80067b4 <__assert_func>
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	3202      	adds	r2, #2
 8005d0a:	f104 010c 	add.w	r1, r4, #12
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	300c      	adds	r0, #12
 8005d12:	f7ff ff5b 	bl	8005bcc <memcpy>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ffa5 	bl	8005c68 <_Bfree>
 8005d1e:	4644      	mov	r4, r8
 8005d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d24:	3501      	adds	r5, #1
 8005d26:	615e      	str	r6, [r3, #20]
 8005d28:	6125      	str	r5, [r4, #16]
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	08007467 	.word	0x08007467
 8005d34:	08007478 	.word	0x08007478

08005d38 <__hi0bits>:
 8005d38:	0c03      	lsrs	r3, r0, #16
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	b9d3      	cbnz	r3, 8005d74 <__hi0bits+0x3c>
 8005d3e:	0400      	lsls	r0, r0, #16
 8005d40:	2310      	movs	r3, #16
 8005d42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d46:	bf04      	itt	eq
 8005d48:	0200      	lsleq	r0, r0, #8
 8005d4a:	3308      	addeq	r3, #8
 8005d4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d50:	bf04      	itt	eq
 8005d52:	0100      	lsleq	r0, r0, #4
 8005d54:	3304      	addeq	r3, #4
 8005d56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d5a:	bf04      	itt	eq
 8005d5c:	0080      	lsleq	r0, r0, #2
 8005d5e:	3302      	addeq	r3, #2
 8005d60:	2800      	cmp	r0, #0
 8005d62:	db05      	blt.n	8005d70 <__hi0bits+0x38>
 8005d64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d68:	f103 0301 	add.w	r3, r3, #1
 8005d6c:	bf08      	it	eq
 8005d6e:	2320      	moveq	r3, #32
 8005d70:	4618      	mov	r0, r3
 8005d72:	4770      	bx	lr
 8005d74:	2300      	movs	r3, #0
 8005d76:	e7e4      	b.n	8005d42 <__hi0bits+0xa>

08005d78 <__lo0bits>:
 8005d78:	6803      	ldr	r3, [r0, #0]
 8005d7a:	f013 0207 	ands.w	r2, r3, #7
 8005d7e:	4601      	mov	r1, r0
 8005d80:	d00b      	beq.n	8005d9a <__lo0bits+0x22>
 8005d82:	07da      	lsls	r2, r3, #31
 8005d84:	d423      	bmi.n	8005dce <__lo0bits+0x56>
 8005d86:	0798      	lsls	r0, r3, #30
 8005d88:	bf49      	itett	mi
 8005d8a:	085b      	lsrmi	r3, r3, #1
 8005d8c:	089b      	lsrpl	r3, r3, #2
 8005d8e:	2001      	movmi	r0, #1
 8005d90:	600b      	strmi	r3, [r1, #0]
 8005d92:	bf5c      	itt	pl
 8005d94:	600b      	strpl	r3, [r1, #0]
 8005d96:	2002      	movpl	r0, #2
 8005d98:	4770      	bx	lr
 8005d9a:	b298      	uxth	r0, r3
 8005d9c:	b9a8      	cbnz	r0, 8005dca <__lo0bits+0x52>
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	2010      	movs	r0, #16
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	b90a      	cbnz	r2, 8005daa <__lo0bits+0x32>
 8005da6:	3008      	adds	r0, #8
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	071a      	lsls	r2, r3, #28
 8005dac:	bf04      	itt	eq
 8005dae:	091b      	lsreq	r3, r3, #4
 8005db0:	3004      	addeq	r0, #4
 8005db2:	079a      	lsls	r2, r3, #30
 8005db4:	bf04      	itt	eq
 8005db6:	089b      	lsreq	r3, r3, #2
 8005db8:	3002      	addeq	r0, #2
 8005dba:	07da      	lsls	r2, r3, #31
 8005dbc:	d403      	bmi.n	8005dc6 <__lo0bits+0x4e>
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	f100 0001 	add.w	r0, r0, #1
 8005dc4:	d005      	beq.n	8005dd2 <__lo0bits+0x5a>
 8005dc6:	600b      	str	r3, [r1, #0]
 8005dc8:	4770      	bx	lr
 8005dca:	4610      	mov	r0, r2
 8005dcc:	e7e9      	b.n	8005da2 <__lo0bits+0x2a>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	4770      	bx	lr
 8005dd2:	2020      	movs	r0, #32
 8005dd4:	4770      	bx	lr
	...

08005dd8 <__i2b>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	460c      	mov	r4, r1
 8005ddc:	2101      	movs	r1, #1
 8005dde:	f7ff ff03 	bl	8005be8 <_Balloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	b928      	cbnz	r0, 8005df2 <__i2b+0x1a>
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <__i2b+0x24>)
 8005de8:	4805      	ldr	r0, [pc, #20]	; (8005e00 <__i2b+0x28>)
 8005dea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005dee:	f000 fce1 	bl	80067b4 <__assert_func>
 8005df2:	2301      	movs	r3, #1
 8005df4:	6144      	str	r4, [r0, #20]
 8005df6:	6103      	str	r3, [r0, #16]
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08007467 	.word	0x08007467
 8005e00:	08007478 	.word	0x08007478

08005e04 <__multiply>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	4691      	mov	r9, r2
 8005e0a:	690a      	ldr	r2, [r1, #16]
 8005e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	bfb8      	it	lt
 8005e14:	460b      	movlt	r3, r1
 8005e16:	460c      	mov	r4, r1
 8005e18:	bfbc      	itt	lt
 8005e1a:	464c      	movlt	r4, r9
 8005e1c:	4699      	movlt	r9, r3
 8005e1e:	6927      	ldr	r7, [r4, #16]
 8005e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	6861      	ldr	r1, [r4, #4]
 8005e28:	eb07 060a 	add.w	r6, r7, sl
 8005e2c:	42b3      	cmp	r3, r6
 8005e2e:	b085      	sub	sp, #20
 8005e30:	bfb8      	it	lt
 8005e32:	3101      	addlt	r1, #1
 8005e34:	f7ff fed8 	bl	8005be8 <_Balloc>
 8005e38:	b930      	cbnz	r0, 8005e48 <__multiply+0x44>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <__multiply+0x14c>)
 8005e3e:	4845      	ldr	r0, [pc, #276]	; (8005f54 <__multiply+0x150>)
 8005e40:	f240 115d 	movw	r1, #349	; 0x15d
 8005e44:	f000 fcb6 	bl	80067b4 <__assert_func>
 8005e48:	f100 0514 	add.w	r5, r0, #20
 8005e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e50:	462b      	mov	r3, r5
 8005e52:	2200      	movs	r2, #0
 8005e54:	4543      	cmp	r3, r8
 8005e56:	d321      	bcc.n	8005e9c <__multiply+0x98>
 8005e58:	f104 0314 	add.w	r3, r4, #20
 8005e5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e60:	f109 0314 	add.w	r3, r9, #20
 8005e64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e68:	9202      	str	r2, [sp, #8]
 8005e6a:	1b3a      	subs	r2, r7, r4
 8005e6c:	3a15      	subs	r2, #21
 8005e6e:	f022 0203 	bic.w	r2, r2, #3
 8005e72:	3204      	adds	r2, #4
 8005e74:	f104 0115 	add.w	r1, r4, #21
 8005e78:	428f      	cmp	r7, r1
 8005e7a:	bf38      	it	cc
 8005e7c:	2204      	movcc	r2, #4
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	9a02      	ldr	r2, [sp, #8]
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d80c      	bhi.n	8005ea2 <__multiply+0x9e>
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	dd03      	ble.n	8005e94 <__multiply+0x90>
 8005e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05a      	beq.n	8005f4a <__multiply+0x146>
 8005e94:	6106      	str	r6, [r0, #16]
 8005e96:	b005      	add	sp, #20
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	f843 2b04 	str.w	r2, [r3], #4
 8005ea0:	e7d8      	b.n	8005e54 <__multiply+0x50>
 8005ea2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	d024      	beq.n	8005ef6 <__multiply+0xf2>
 8005eac:	f104 0e14 	add.w	lr, r4, #20
 8005eb0:	46a9      	mov	r9, r5
 8005eb2:	f04f 0c00 	mov.w	ip, #0
 8005eb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005eba:	f8d9 1000 	ldr.w	r1, [r9]
 8005ebe:	fa1f fb82 	uxth.w	fp, r2
 8005ec2:	b289      	uxth	r1, r1
 8005ec4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ed0:	4461      	add	r1, ip
 8005ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ed6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ee4:	4577      	cmp	r7, lr
 8005ee6:	f849 1b04 	str.w	r1, [r9], #4
 8005eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005eee:	d8e2      	bhi.n	8005eb6 <__multiply+0xb2>
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	f845 c002 	str.w	ip, [r5, r2]
 8005ef6:	9a03      	ldr	r2, [sp, #12]
 8005ef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005efc:	3304      	adds	r3, #4
 8005efe:	f1b9 0f00 	cmp.w	r9, #0
 8005f02:	d020      	beq.n	8005f46 <__multiply+0x142>
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	f104 0c14 	add.w	ip, r4, #20
 8005f0a:	46ae      	mov	lr, r5
 8005f0c:	f04f 0a00 	mov.w	sl, #0
 8005f10:	f8bc b000 	ldrh.w	fp, [ip]
 8005f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f18:	fb09 220b 	mla	r2, r9, fp, r2
 8005f1c:	4492      	add	sl, r2
 8005f1e:	b289      	uxth	r1, r1
 8005f20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f24:	f84e 1b04 	str.w	r1, [lr], #4
 8005f28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f2c:	f8be 1000 	ldrh.w	r1, [lr]
 8005f30:	0c12      	lsrs	r2, r2, #16
 8005f32:	fb09 1102 	mla	r1, r9, r2, r1
 8005f36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f3a:	4567      	cmp	r7, ip
 8005f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f40:	d8e6      	bhi.n	8005f10 <__multiply+0x10c>
 8005f42:	9a01      	ldr	r2, [sp, #4]
 8005f44:	50a9      	str	r1, [r5, r2]
 8005f46:	3504      	adds	r5, #4
 8005f48:	e79a      	b.n	8005e80 <__multiply+0x7c>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	e79c      	b.n	8005e88 <__multiply+0x84>
 8005f4e:	bf00      	nop
 8005f50:	08007467 	.word	0x08007467
 8005f54:	08007478 	.word	0x08007478

08005f58 <__pow5mult>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	f012 0203 	ands.w	r2, r2, #3
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	d007      	beq.n	8005f78 <__pow5mult+0x20>
 8005f68:	4c25      	ldr	r4, [pc, #148]	; (8006000 <__pow5mult+0xa8>)
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f72:	f7ff fe9b 	bl	8005cac <__multadd>
 8005f76:	4607      	mov	r7, r0
 8005f78:	10ad      	asrs	r5, r5, #2
 8005f7a:	d03d      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f7e:	b97c      	cbnz	r4, 8005fa0 <__pow5mult+0x48>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7ff fe1b 	bl	8005bbc <malloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6270      	str	r0, [r6, #36]	; 0x24
 8005f8a:	b928      	cbnz	r0, 8005f98 <__pow5mult+0x40>
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <__pow5mult+0xac>)
 8005f8e:	481e      	ldr	r0, [pc, #120]	; (8006008 <__pow5mult+0xb0>)
 8005f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f94:	f000 fc0e 	bl	80067b4 <__assert_func>
 8005f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f9c:	6004      	str	r4, [r0, #0]
 8005f9e:	60c4      	str	r4, [r0, #12]
 8005fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fa8:	b94c      	cbnz	r4, 8005fbe <__pow5mult+0x66>
 8005faa:	f240 2171 	movw	r1, #625	; 0x271
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f7ff ff12 	bl	8005dd8 <__i2b>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fba:	4604      	mov	r4, r0
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	f04f 0900 	mov.w	r9, #0
 8005fc2:	07eb      	lsls	r3, r5, #31
 8005fc4:	d50a      	bpl.n	8005fdc <__pow5mult+0x84>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff1a 	bl	8005e04 <__multiply>
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff fe47 	bl	8005c68 <_Bfree>
 8005fda:	4647      	mov	r7, r8
 8005fdc:	106d      	asrs	r5, r5, #1
 8005fde:	d00b      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	b938      	cbnz	r0, 8005ff4 <__pow5mult+0x9c>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ff0b 	bl	8005e04 <__multiply>
 8005fee:	6020      	str	r0, [r4, #0]
 8005ff0:	f8c0 9000 	str.w	r9, [r0]
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	e7e4      	b.n	8005fc2 <__pow5mult+0x6a>
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	bf00      	nop
 8006000:	080075c8 	.word	0x080075c8
 8006004:	080073f5 	.word	0x080073f5
 8006008:	08007478 	.word	0x08007478

0800600c <__lshift>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460c      	mov	r4, r1
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	4607      	mov	r7, r0
 800601e:	4691      	mov	r9, r2
 8006020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006024:	f108 0601 	add.w	r6, r8, #1
 8006028:	42b3      	cmp	r3, r6
 800602a:	db0b      	blt.n	8006044 <__lshift+0x38>
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff fddb 	bl	8005be8 <_Balloc>
 8006032:	4605      	mov	r5, r0
 8006034:	b948      	cbnz	r0, 800604a <__lshift+0x3e>
 8006036:	4602      	mov	r2, r0
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <__lshift+0xd8>)
 800603a:	482b      	ldr	r0, [pc, #172]	; (80060e8 <__lshift+0xdc>)
 800603c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006040:	f000 fbb8 	bl	80067b4 <__assert_func>
 8006044:	3101      	adds	r1, #1
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	e7ee      	b.n	8006028 <__lshift+0x1c>
 800604a:	2300      	movs	r3, #0
 800604c:	f100 0114 	add.w	r1, r0, #20
 8006050:	f100 0210 	add.w	r2, r0, #16
 8006054:	4618      	mov	r0, r3
 8006056:	4553      	cmp	r3, sl
 8006058:	db37      	blt.n	80060ca <__lshift+0xbe>
 800605a:	6920      	ldr	r0, [r4, #16]
 800605c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006060:	f104 0314 	add.w	r3, r4, #20
 8006064:	f019 091f 	ands.w	r9, r9, #31
 8006068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800606c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006070:	d02f      	beq.n	80060d2 <__lshift+0xc6>
 8006072:	f1c9 0e20 	rsb	lr, r9, #32
 8006076:	468a      	mov	sl, r1
 8006078:	f04f 0c00 	mov.w	ip, #0
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	fa02 f209 	lsl.w	r2, r2, r9
 8006082:	ea42 020c 	orr.w	r2, r2, ip
 8006086:	f84a 2b04 	str.w	r2, [sl], #4
 800608a:	f853 2b04 	ldr.w	r2, [r3], #4
 800608e:	4298      	cmp	r0, r3
 8006090:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006094:	d8f2      	bhi.n	800607c <__lshift+0x70>
 8006096:	1b03      	subs	r3, r0, r4
 8006098:	3b15      	subs	r3, #21
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	3304      	adds	r3, #4
 80060a0:	f104 0215 	add.w	r2, r4, #21
 80060a4:	4290      	cmp	r0, r2
 80060a6:	bf38      	it	cc
 80060a8:	2304      	movcc	r3, #4
 80060aa:	f841 c003 	str.w	ip, [r1, r3]
 80060ae:	f1bc 0f00 	cmp.w	ip, #0
 80060b2:	d001      	beq.n	80060b8 <__lshift+0xac>
 80060b4:	f108 0602 	add.w	r6, r8, #2
 80060b8:	3e01      	subs	r6, #1
 80060ba:	4638      	mov	r0, r7
 80060bc:	612e      	str	r6, [r5, #16]
 80060be:	4621      	mov	r1, r4
 80060c0:	f7ff fdd2 	bl	8005c68 <_Bfree>
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7c1      	b.n	8006056 <__lshift+0x4a>
 80060d2:	3904      	subs	r1, #4
 80060d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80060dc:	4298      	cmp	r0, r3
 80060de:	d8f9      	bhi.n	80060d4 <__lshift+0xc8>
 80060e0:	e7ea      	b.n	80060b8 <__lshift+0xac>
 80060e2:	bf00      	nop
 80060e4:	08007467 	.word	0x08007467
 80060e8:	08007478 	.word	0x08007478

080060ec <__mcmp>:
 80060ec:	b530      	push	{r4, r5, lr}
 80060ee:	6902      	ldr	r2, [r0, #16]
 80060f0:	690c      	ldr	r4, [r1, #16]
 80060f2:	1b12      	subs	r2, r2, r4
 80060f4:	d10e      	bne.n	8006114 <__mcmp+0x28>
 80060f6:	f100 0314 	add.w	r3, r0, #20
 80060fa:	3114      	adds	r1, #20
 80060fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800610c:	42a5      	cmp	r5, r4
 800610e:	d003      	beq.n	8006118 <__mcmp+0x2c>
 8006110:	d305      	bcc.n	800611e <__mcmp+0x32>
 8006112:	2201      	movs	r2, #1
 8006114:	4610      	mov	r0, r2
 8006116:	bd30      	pop	{r4, r5, pc}
 8006118:	4283      	cmp	r3, r0
 800611a:	d3f3      	bcc.n	8006104 <__mcmp+0x18>
 800611c:	e7fa      	b.n	8006114 <__mcmp+0x28>
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	e7f7      	b.n	8006114 <__mcmp+0x28>

08006124 <__mdiff>:
 8006124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	4606      	mov	r6, r0
 800612c:	4611      	mov	r1, r2
 800612e:	4620      	mov	r0, r4
 8006130:	4690      	mov	r8, r2
 8006132:	f7ff ffdb 	bl	80060ec <__mcmp>
 8006136:	1e05      	subs	r5, r0, #0
 8006138:	d110      	bne.n	800615c <__mdiff+0x38>
 800613a:	4629      	mov	r1, r5
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fd53 	bl	8005be8 <_Balloc>
 8006142:	b930      	cbnz	r0, 8006152 <__mdiff+0x2e>
 8006144:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <__mdiff+0x10c>)
 8006146:	4602      	mov	r2, r0
 8006148:	f240 2132 	movw	r1, #562	; 0x232
 800614c:	4839      	ldr	r0, [pc, #228]	; (8006234 <__mdiff+0x110>)
 800614e:	f000 fb31 	bl	80067b4 <__assert_func>
 8006152:	2301      	movs	r3, #1
 8006154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	bfa4      	itt	ge
 800615e:	4643      	movge	r3, r8
 8006160:	46a0      	movge	r8, r4
 8006162:	4630      	mov	r0, r6
 8006164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006168:	bfa6      	itte	ge
 800616a:	461c      	movge	r4, r3
 800616c:	2500      	movge	r5, #0
 800616e:	2501      	movlt	r5, #1
 8006170:	f7ff fd3a 	bl	8005be8 <_Balloc>
 8006174:	b920      	cbnz	r0, 8006180 <__mdiff+0x5c>
 8006176:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <__mdiff+0x10c>)
 8006178:	4602      	mov	r2, r0
 800617a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800617e:	e7e5      	b.n	800614c <__mdiff+0x28>
 8006180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006184:	6926      	ldr	r6, [r4, #16]
 8006186:	60c5      	str	r5, [r0, #12]
 8006188:	f104 0914 	add.w	r9, r4, #20
 800618c:	f108 0514 	add.w	r5, r8, #20
 8006190:	f100 0e14 	add.w	lr, r0, #20
 8006194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800619c:	f108 0210 	add.w	r2, r8, #16
 80061a0:	46f2      	mov	sl, lr
 80061a2:	2100      	movs	r1, #0
 80061a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061ac:	fa1f f883 	uxth.w	r8, r3
 80061b0:	fa11 f18b 	uxtah	r1, r1, fp
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	eba1 0808 	sub.w	r8, r1, r8
 80061ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061c2:	fa1f f888 	uxth.w	r8, r8
 80061c6:	1419      	asrs	r1, r3, #16
 80061c8:	454e      	cmp	r6, r9
 80061ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061ce:	f84a 3b04 	str.w	r3, [sl], #4
 80061d2:	d8e7      	bhi.n	80061a4 <__mdiff+0x80>
 80061d4:	1b33      	subs	r3, r6, r4
 80061d6:	3b15      	subs	r3, #21
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	3304      	adds	r3, #4
 80061de:	3415      	adds	r4, #21
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	bf38      	it	cc
 80061e4:	2304      	movcc	r3, #4
 80061e6:	441d      	add	r5, r3
 80061e8:	4473      	add	r3, lr
 80061ea:	469e      	mov	lr, r3
 80061ec:	462e      	mov	r6, r5
 80061ee:	4566      	cmp	r6, ip
 80061f0:	d30e      	bcc.n	8006210 <__mdiff+0xec>
 80061f2:	f10c 0203 	add.w	r2, ip, #3
 80061f6:	1b52      	subs	r2, r2, r5
 80061f8:	f022 0203 	bic.w	r2, r2, #3
 80061fc:	3d03      	subs	r5, #3
 80061fe:	45ac      	cmp	ip, r5
 8006200:	bf38      	it	cc
 8006202:	2200      	movcc	r2, #0
 8006204:	441a      	add	r2, r3
 8006206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800620a:	b17b      	cbz	r3, 800622c <__mdiff+0x108>
 800620c:	6107      	str	r7, [r0, #16]
 800620e:	e7a3      	b.n	8006158 <__mdiff+0x34>
 8006210:	f856 8b04 	ldr.w	r8, [r6], #4
 8006214:	fa11 f288 	uxtah	r2, r1, r8
 8006218:	1414      	asrs	r4, r2, #16
 800621a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800621e:	b292      	uxth	r2, r2
 8006220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006224:	f84e 2b04 	str.w	r2, [lr], #4
 8006228:	1421      	asrs	r1, r4, #16
 800622a:	e7e0      	b.n	80061ee <__mdiff+0xca>
 800622c:	3f01      	subs	r7, #1
 800622e:	e7ea      	b.n	8006206 <__mdiff+0xe2>
 8006230:	08007467 	.word	0x08007467
 8006234:	08007478 	.word	0x08007478

08006238 <__d2b>:
 8006238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800623c:	4689      	mov	r9, r1
 800623e:	2101      	movs	r1, #1
 8006240:	ec57 6b10 	vmov	r6, r7, d0
 8006244:	4690      	mov	r8, r2
 8006246:	f7ff fccf 	bl	8005be8 <_Balloc>
 800624a:	4604      	mov	r4, r0
 800624c:	b930      	cbnz	r0, 800625c <__d2b+0x24>
 800624e:	4602      	mov	r2, r0
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <__d2b+0xb0>)
 8006252:	4826      	ldr	r0, [pc, #152]	; (80062ec <__d2b+0xb4>)
 8006254:	f240 310a 	movw	r1, #778	; 0x30a
 8006258:	f000 faac 	bl	80067b4 <__assert_func>
 800625c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006264:	bb35      	cbnz	r5, 80062b4 <__d2b+0x7c>
 8006266:	2e00      	cmp	r6, #0
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	d028      	beq.n	80062be <__d2b+0x86>
 800626c:	4668      	mov	r0, sp
 800626e:	9600      	str	r6, [sp, #0]
 8006270:	f7ff fd82 	bl	8005d78 <__lo0bits>
 8006274:	9900      	ldr	r1, [sp, #0]
 8006276:	b300      	cbz	r0, 80062ba <__d2b+0x82>
 8006278:	9a01      	ldr	r2, [sp, #4]
 800627a:	f1c0 0320 	rsb	r3, r0, #32
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	430b      	orrs	r3, r1
 8006284:	40c2      	lsrs	r2, r0
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	9201      	str	r2, [sp, #4]
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	61a3      	str	r3, [r4, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf14      	ite	ne
 8006292:	2202      	movne	r2, #2
 8006294:	2201      	moveq	r2, #1
 8006296:	6122      	str	r2, [r4, #16]
 8006298:	b1d5      	cbz	r5, 80062d0 <__d2b+0x98>
 800629a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800629e:	4405      	add	r5, r0
 80062a0:	f8c9 5000 	str.w	r5, [r9]
 80062a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062a8:	f8c8 0000 	str.w	r0, [r8]
 80062ac:	4620      	mov	r0, r4
 80062ae:	b003      	add	sp, #12
 80062b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b8:	e7d5      	b.n	8006266 <__d2b+0x2e>
 80062ba:	6161      	str	r1, [r4, #20]
 80062bc:	e7e5      	b.n	800628a <__d2b+0x52>
 80062be:	a801      	add	r0, sp, #4
 80062c0:	f7ff fd5a 	bl	8005d78 <__lo0bits>
 80062c4:	9b01      	ldr	r3, [sp, #4]
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	2201      	movs	r2, #1
 80062ca:	6122      	str	r2, [r4, #16]
 80062cc:	3020      	adds	r0, #32
 80062ce:	e7e3      	b.n	8006298 <__d2b+0x60>
 80062d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062d8:	f8c9 0000 	str.w	r0, [r9]
 80062dc:	6918      	ldr	r0, [r3, #16]
 80062de:	f7ff fd2b 	bl	8005d38 <__hi0bits>
 80062e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062e6:	e7df      	b.n	80062a8 <__d2b+0x70>
 80062e8:	08007467 	.word	0x08007467
 80062ec:	08007478 	.word	0x08007478

080062f0 <_calloc_r>:
 80062f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062f2:	fba1 2402 	umull	r2, r4, r1, r2
 80062f6:	b94c      	cbnz	r4, 800630c <_calloc_r+0x1c>
 80062f8:	4611      	mov	r1, r2
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	f000 f87a 	bl	80063f4 <_malloc_r>
 8006300:	9a01      	ldr	r2, [sp, #4]
 8006302:	4605      	mov	r5, r0
 8006304:	b930      	cbnz	r0, 8006314 <_calloc_r+0x24>
 8006306:	4628      	mov	r0, r5
 8006308:	b003      	add	sp, #12
 800630a:	bd30      	pop	{r4, r5, pc}
 800630c:	220c      	movs	r2, #12
 800630e:	6002      	str	r2, [r0, #0]
 8006310:	2500      	movs	r5, #0
 8006312:	e7f8      	b.n	8006306 <_calloc_r+0x16>
 8006314:	4621      	mov	r1, r4
 8006316:	f7fe f941 	bl	800459c <memset>
 800631a:	e7f4      	b.n	8006306 <_calloc_r+0x16>

0800631c <_free_r>:
 800631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631e:	2900      	cmp	r1, #0
 8006320:	d044      	beq.n	80063ac <_free_r+0x90>
 8006322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006326:	9001      	str	r0, [sp, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f1a1 0404 	sub.w	r4, r1, #4
 800632e:	bfb8      	it	lt
 8006330:	18e4      	addlt	r4, r4, r3
 8006332:	f000 fa9b 	bl	800686c <__malloc_lock>
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <_free_r+0x94>)
 8006338:	9801      	ldr	r0, [sp, #4]
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	b933      	cbnz	r3, 800634c <_free_r+0x30>
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	6014      	str	r4, [r2, #0]
 8006342:	b003      	add	sp, #12
 8006344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006348:	f000 ba96 	b.w	8006878 <__malloc_unlock>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d908      	bls.n	8006362 <_free_r+0x46>
 8006350:	6825      	ldr	r5, [r4, #0]
 8006352:	1961      	adds	r1, r4, r5
 8006354:	428b      	cmp	r3, r1
 8006356:	bf01      	itttt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	1949      	addeq	r1, r1, r5
 800635e:	6021      	streq	r1, [r4, #0]
 8006360:	e7ed      	b.n	800633e <_free_r+0x22>
 8006362:	461a      	mov	r2, r3
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b10b      	cbz	r3, 800636c <_free_r+0x50>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d9fa      	bls.n	8006362 <_free_r+0x46>
 800636c:	6811      	ldr	r1, [r2, #0]
 800636e:	1855      	adds	r5, r2, r1
 8006370:	42a5      	cmp	r5, r4
 8006372:	d10b      	bne.n	800638c <_free_r+0x70>
 8006374:	6824      	ldr	r4, [r4, #0]
 8006376:	4421      	add	r1, r4
 8006378:	1854      	adds	r4, r2, r1
 800637a:	42a3      	cmp	r3, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	d1e0      	bne.n	8006342 <_free_r+0x26>
 8006380:	681c      	ldr	r4, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	6053      	str	r3, [r2, #4]
 8006386:	4421      	add	r1, r4
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	e7da      	b.n	8006342 <_free_r+0x26>
 800638c:	d902      	bls.n	8006394 <_free_r+0x78>
 800638e:	230c      	movs	r3, #12
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	e7d6      	b.n	8006342 <_free_r+0x26>
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1961      	adds	r1, r4, r5
 8006398:	428b      	cmp	r3, r1
 800639a:	bf04      	itt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	bf04      	itt	eq
 80063a4:	1949      	addeq	r1, r1, r5
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	6054      	str	r4, [r2, #4]
 80063aa:	e7ca      	b.n	8006342 <_free_r+0x26>
 80063ac:	b003      	add	sp, #12
 80063ae:	bd30      	pop	{r4, r5, pc}
 80063b0:	20000340 	.word	0x20000340

080063b4 <sbrk_aligned>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4e0e      	ldr	r6, [pc, #56]	; (80063f0 <sbrk_aligned+0x3c>)
 80063b8:	460c      	mov	r4, r1
 80063ba:	6831      	ldr	r1, [r6, #0]
 80063bc:	4605      	mov	r5, r0
 80063be:	b911      	cbnz	r1, 80063c6 <sbrk_aligned+0x12>
 80063c0:	f000 f9e8 	bl	8006794 <_sbrk_r>
 80063c4:	6030      	str	r0, [r6, #0]
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f9e3 	bl	8006794 <_sbrk_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d00a      	beq.n	80063e8 <sbrk_aligned+0x34>
 80063d2:	1cc4      	adds	r4, r0, #3
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d007      	beq.n	80063ec <sbrk_aligned+0x38>
 80063dc:	1a21      	subs	r1, r4, r0
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f9d8 	bl	8006794 <_sbrk_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d101      	bne.n	80063ec <sbrk_aligned+0x38>
 80063e8:	f04f 34ff 	mov.w	r4, #4294967295
 80063ec:	4620      	mov	r0, r4
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	20000344 	.word	0x20000344

080063f4 <_malloc_r>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	1ccd      	adds	r5, r1, #3
 80063fa:	f025 0503 	bic.w	r5, r5, #3
 80063fe:	3508      	adds	r5, #8
 8006400:	2d0c      	cmp	r5, #12
 8006402:	bf38      	it	cc
 8006404:	250c      	movcc	r5, #12
 8006406:	2d00      	cmp	r5, #0
 8006408:	4607      	mov	r7, r0
 800640a:	db01      	blt.n	8006410 <_malloc_r+0x1c>
 800640c:	42a9      	cmp	r1, r5
 800640e:	d905      	bls.n	800641c <_malloc_r+0x28>
 8006410:	230c      	movs	r3, #12
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	2600      	movs	r6, #0
 8006416:	4630      	mov	r0, r6
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	4e2e      	ldr	r6, [pc, #184]	; (80064d8 <_malloc_r+0xe4>)
 800641e:	f000 fa25 	bl	800686c <__malloc_lock>
 8006422:	6833      	ldr	r3, [r6, #0]
 8006424:	461c      	mov	r4, r3
 8006426:	bb34      	cbnz	r4, 8006476 <_malloc_r+0x82>
 8006428:	4629      	mov	r1, r5
 800642a:	4638      	mov	r0, r7
 800642c:	f7ff ffc2 	bl	80063b4 <sbrk_aligned>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	4604      	mov	r4, r0
 8006434:	d14d      	bne.n	80064d2 <_malloc_r+0xde>
 8006436:	6834      	ldr	r4, [r6, #0]
 8006438:	4626      	mov	r6, r4
 800643a:	2e00      	cmp	r6, #0
 800643c:	d140      	bne.n	80064c0 <_malloc_r+0xcc>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4631      	mov	r1, r6
 8006442:	4638      	mov	r0, r7
 8006444:	eb04 0803 	add.w	r8, r4, r3
 8006448:	f000 f9a4 	bl	8006794 <_sbrk_r>
 800644c:	4580      	cmp	r8, r0
 800644e:	d13a      	bne.n	80064c6 <_malloc_r+0xd2>
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	3503      	adds	r5, #3
 8006454:	1a6d      	subs	r5, r5, r1
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	4629      	mov	r1, r5
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa5 	bl	80063b4 <sbrk_aligned>
 800646a:	3001      	adds	r0, #1
 800646c:	d02b      	beq.n	80064c6 <_malloc_r+0xd2>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	442b      	add	r3, r5
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	e00e      	b.n	8006494 <_malloc_r+0xa0>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	1b52      	subs	r2, r2, r5
 800647a:	d41e      	bmi.n	80064ba <_malloc_r+0xc6>
 800647c:	2a0b      	cmp	r2, #11
 800647e:	d916      	bls.n	80064ae <_malloc_r+0xba>
 8006480:	1961      	adds	r1, r4, r5
 8006482:	42a3      	cmp	r3, r4
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	bf18      	it	ne
 8006488:	6059      	strne	r1, [r3, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	bf08      	it	eq
 800648e:	6031      	streq	r1, [r6, #0]
 8006490:	5162      	str	r2, [r4, r5]
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	4638      	mov	r0, r7
 8006496:	f104 060b 	add.w	r6, r4, #11
 800649a:	f000 f9ed 	bl	8006878 <__malloc_unlock>
 800649e:	f026 0607 	bic.w	r6, r6, #7
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	1af2      	subs	r2, r6, r3
 80064a6:	d0b6      	beq.n	8006416 <_malloc_r+0x22>
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	50a3      	str	r3, [r4, r2]
 80064ac:	e7b3      	b.n	8006416 <_malloc_r+0x22>
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	bf0c      	ite	eq
 80064b4:	6032      	streq	r2, [r6, #0]
 80064b6:	605a      	strne	r2, [r3, #4]
 80064b8:	e7ec      	b.n	8006494 <_malloc_r+0xa0>
 80064ba:	4623      	mov	r3, r4
 80064bc:	6864      	ldr	r4, [r4, #4]
 80064be:	e7b2      	b.n	8006426 <_malloc_r+0x32>
 80064c0:	4634      	mov	r4, r6
 80064c2:	6876      	ldr	r6, [r6, #4]
 80064c4:	e7b9      	b.n	800643a <_malloc_r+0x46>
 80064c6:	230c      	movs	r3, #12
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4638      	mov	r0, r7
 80064cc:	f000 f9d4 	bl	8006878 <__malloc_unlock>
 80064d0:	e7a1      	b.n	8006416 <_malloc_r+0x22>
 80064d2:	6025      	str	r5, [r4, #0]
 80064d4:	e7de      	b.n	8006494 <_malloc_r+0xa0>
 80064d6:	bf00      	nop
 80064d8:	20000340 	.word	0x20000340

080064dc <__ssputs_r>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	688e      	ldr	r6, [r1, #8]
 80064e2:	429e      	cmp	r6, r3
 80064e4:	4682      	mov	sl, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	461f      	mov	r7, r3
 80064ec:	d838      	bhi.n	8006560 <__ssputs_r+0x84>
 80064ee:	898a      	ldrh	r2, [r1, #12]
 80064f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064f4:	d032      	beq.n	800655c <__ssputs_r+0x80>
 80064f6:	6825      	ldr	r5, [r4, #0]
 80064f8:	6909      	ldr	r1, [r1, #16]
 80064fa:	eba5 0901 	sub.w	r9, r5, r1
 80064fe:	6965      	ldr	r5, [r4, #20]
 8006500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006508:	3301      	adds	r3, #1
 800650a:	444b      	add	r3, r9
 800650c:	106d      	asrs	r5, r5, #1
 800650e:	429d      	cmp	r5, r3
 8006510:	bf38      	it	cc
 8006512:	461d      	movcc	r5, r3
 8006514:	0553      	lsls	r3, r2, #21
 8006516:	d531      	bpl.n	800657c <__ssputs_r+0xa0>
 8006518:	4629      	mov	r1, r5
 800651a:	f7ff ff6b 	bl	80063f4 <_malloc_r>
 800651e:	4606      	mov	r6, r0
 8006520:	b950      	cbnz	r0, 8006538 <__ssputs_r+0x5c>
 8006522:	230c      	movs	r3, #12
 8006524:	f8ca 3000 	str.w	r3, [sl]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	6921      	ldr	r1, [r4, #16]
 800653a:	464a      	mov	r2, r9
 800653c:	f7ff fb46 	bl	8005bcc <memcpy>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	6126      	str	r6, [r4, #16]
 800654e:	6165      	str	r5, [r4, #20]
 8006550:	444e      	add	r6, r9
 8006552:	eba5 0509 	sub.w	r5, r5, r9
 8006556:	6026      	str	r6, [r4, #0]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	463e      	mov	r6, r7
 800655c:	42be      	cmp	r6, r7
 800655e:	d900      	bls.n	8006562 <__ssputs_r+0x86>
 8006560:	463e      	mov	r6, r7
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	4632      	mov	r2, r6
 8006566:	4641      	mov	r1, r8
 8006568:	f000 f966 	bl	8006838 <memmove>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	1b9b      	subs	r3, r3, r6
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	4433      	add	r3, r6
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2000      	movs	r0, #0
 800657a:	e7db      	b.n	8006534 <__ssputs_r+0x58>
 800657c:	462a      	mov	r2, r5
 800657e:	f000 f981 	bl	8006884 <_realloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	2800      	cmp	r0, #0
 8006586:	d1e1      	bne.n	800654c <__ssputs_r+0x70>
 8006588:	6921      	ldr	r1, [r4, #16]
 800658a:	4650      	mov	r0, sl
 800658c:	f7ff fec6 	bl	800631c <_free_r>
 8006590:	e7c7      	b.n	8006522 <__ssputs_r+0x46>
	...

08006594 <_svfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4698      	mov	r8, r3
 800659a:	898b      	ldrh	r3, [r1, #12]
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	b09d      	sub	sp, #116	; 0x74
 80065a0:	4607      	mov	r7, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	d50e      	bpl.n	80065c6 <_svfiprintf_r+0x32>
 80065a8:	690b      	ldr	r3, [r1, #16]
 80065aa:	b963      	cbnz	r3, 80065c6 <_svfiprintf_r+0x32>
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	f7ff ff21 	bl	80063f4 <_malloc_r>
 80065b2:	6028      	str	r0, [r5, #0]
 80065b4:	6128      	str	r0, [r5, #16]
 80065b6:	b920      	cbnz	r0, 80065c2 <_svfiprintf_r+0x2e>
 80065b8:	230c      	movs	r3, #12
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e0d1      	b.n	8006766 <_svfiprintf_r+0x1d2>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	616b      	str	r3, [r5, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	2320      	movs	r3, #32
 80065cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006780 <_svfiprintf_r+0x1ec>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065de:	f04f 0901 	mov.w	r9, #1
 80065e2:	4623      	mov	r3, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	b10a      	cbz	r2, 80065f0 <_svfiprintf_r+0x5c>
 80065ec:	2a25      	cmp	r2, #37	; 0x25
 80065ee:	d1f9      	bne.n	80065e4 <_svfiprintf_r+0x50>
 80065f0:	ebba 0b04 	subs.w	fp, sl, r4
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x7a>
 80065f6:	465b      	mov	r3, fp
 80065f8:	4622      	mov	r2, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff6d 	bl	80064dc <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80aa 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	445a      	add	r2, fp
 800660c:	9209      	str	r2, [sp, #36]	; 0x24
 800660e:	f89a 3000 	ldrb.w	r3, [sl]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80a2 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662e:	931a      	str	r3, [sp, #104]	; 0x68
 8006630:	4654      	mov	r4, sl
 8006632:	2205      	movs	r2, #5
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	4851      	ldr	r0, [pc, #324]	; (8006780 <_svfiprintf_r+0x1ec>)
 800663a:	f7f9 fdd9 	bl	80001f0 <memchr>
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	b9d8      	cbnz	r0, 800667a <_svfiprintf_r+0xe6>
 8006642:	06d0      	lsls	r0, r2, #27
 8006644:	bf44      	itt	mi
 8006646:	2320      	movmi	r3, #32
 8006648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664c:	0711      	lsls	r1, r2, #28
 800664e:	bf44      	itt	mi
 8006650:	232b      	movmi	r3, #43	; 0x2b
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d015      	beq.n	800668a <_svfiprintf_r+0xf6>
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	4654      	mov	r4, sl
 8006662:	2000      	movs	r0, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4621      	mov	r1, r4
 800666a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666e:	3b30      	subs	r3, #48	; 0x30
 8006670:	2b09      	cmp	r3, #9
 8006672:	d94e      	bls.n	8006712 <_svfiprintf_r+0x17e>
 8006674:	b1b0      	cbz	r0, 80066a4 <_svfiprintf_r+0x110>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e014      	b.n	80066a4 <_svfiprintf_r+0x110>
 800667a:	eba0 0308 	sub.w	r3, r0, r8
 800667e:	fa09 f303 	lsl.w	r3, r9, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	46a2      	mov	sl, r4
 8006688:	e7d2      	b.n	8006630 <_svfiprintf_r+0x9c>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	9103      	str	r1, [sp, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbb      	ittet	lt
 8006696:	425b      	neglt	r3, r3
 8006698:	f042 0202 	orrlt.w	r2, r2, #2
 800669c:	9307      	strge	r3, [sp, #28]
 800669e:	9307      	strlt	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	9204      	strlt	r2, [sp, #16]
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	2b2e      	cmp	r3, #46	; 0x2e
 80066a8:	d10c      	bne.n	80066c4 <_svfiprintf_r+0x130>
 80066aa:	7863      	ldrb	r3, [r4, #1]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d135      	bne.n	800671c <_svfiprintf_r+0x188>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfb8      	it	lt
 80066bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c0:	3402      	adds	r4, #2
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006790 <_svfiprintf_r+0x1fc>
 80066c8:	7821      	ldrb	r1, [r4, #0]
 80066ca:	2203      	movs	r2, #3
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7f9 fd8f 	bl	80001f0 <memchr>
 80066d2:	b140      	cbz	r0, 80066e6 <_svfiprintf_r+0x152>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	eba0 000a 	sub.w	r0, r0, sl
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	4303      	orrs	r3, r0
 80066e2:	3401      	adds	r4, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	4826      	ldr	r0, [pc, #152]	; (8006784 <_svfiprintf_r+0x1f0>)
 80066ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f0:	2206      	movs	r2, #6
 80066f2:	f7f9 fd7d 	bl	80001f0 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1d8>
 80066fa:	4b23      	ldr	r3, [pc, #140]	; (8006788 <_svfiprintf_r+0x1f4>)
 80066fc:	bb1b      	cbnz	r3, 8006746 <_svfiprintf_r+0x1b2>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	4433      	add	r3, r6
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e767      	b.n	80065e2 <_svfiprintf_r+0x4e>
 8006712:	fb0c 3202 	mla	r2, ip, r2, r3
 8006716:	460c      	mov	r4, r1
 8006718:	2001      	movs	r0, #1
 800671a:	e7a5      	b.n	8006668 <_svfiprintf_r+0xd4>
 800671c:	2300      	movs	r3, #0
 800671e:	3401      	adds	r4, #1
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	4619      	mov	r1, r3
 8006724:	f04f 0c0a 	mov.w	ip, #10
 8006728:	4620      	mov	r0, r4
 800672a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672e:	3a30      	subs	r2, #48	; 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d903      	bls.n	800673c <_svfiprintf_r+0x1a8>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0c5      	beq.n	80066c4 <_svfiprintf_r+0x130>
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	e7c3      	b.n	80066c4 <_svfiprintf_r+0x130>
 800673c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006740:	4604      	mov	r4, r0
 8006742:	2301      	movs	r3, #1
 8006744:	e7f0      	b.n	8006728 <_svfiprintf_r+0x194>
 8006746:	ab03      	add	r3, sp, #12
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	462a      	mov	r2, r5
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <_svfiprintf_r+0x1f8>)
 800674e:	a904      	add	r1, sp, #16
 8006750:	4638      	mov	r0, r7
 8006752:	f7fd ffcb 	bl	80046ec <_printf_float>
 8006756:	1c42      	adds	r2, r0, #1
 8006758:	4606      	mov	r6, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x176>
 800675c:	89ab      	ldrh	r3, [r5, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af2c 	bmi.w	80065bc <_svfiprintf_r+0x28>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <_svfiprintf_r+0x1f8>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4638      	mov	r0, r7
 8006778:	f7fe fa5c 	bl	8004c34 <_printf_i>
 800677c:	e7eb      	b.n	8006756 <_svfiprintf_r+0x1c2>
 800677e:	bf00      	nop
 8006780:	080075d4 	.word	0x080075d4
 8006784:	080075de 	.word	0x080075de
 8006788:	080046ed 	.word	0x080046ed
 800678c:	080064dd 	.word	0x080064dd
 8006790:	080075da 	.word	0x080075da

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fa ff94 	bl	80016cc <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	20000348 	.word	0x20000348

080067b4 <__assert_func>:
 80067b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067b6:	4614      	mov	r4, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <__assert_func+0x2c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	68d8      	ldr	r0, [r3, #12]
 80067c2:	b14c      	cbz	r4, 80067d8 <__assert_func+0x24>
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <__assert_func+0x30>)
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067cc:	4906      	ldr	r1, [pc, #24]	; (80067e8 <__assert_func+0x34>)
 80067ce:	462b      	mov	r3, r5
 80067d0:	f000 f80e 	bl	80067f0 <fiprintf>
 80067d4:	f000 faac 	bl	8006d30 <abort>
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <__assert_func+0x38>)
 80067da:	461c      	mov	r4, r3
 80067dc:	e7f3      	b.n	80067c6 <__assert_func+0x12>
 80067de:	bf00      	nop
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	080075e5 	.word	0x080075e5
 80067e8:	080075f2 	.word	0x080075f2
 80067ec:	08007620 	.word	0x08007620

080067f0 <fiprintf>:
 80067f0:	b40e      	push	{r1, r2, r3}
 80067f2:	b503      	push	{r0, r1, lr}
 80067f4:	4601      	mov	r1, r0
 80067f6:	ab03      	add	r3, sp, #12
 80067f8:	4805      	ldr	r0, [pc, #20]	; (8006810 <fiprintf+0x20>)
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	6800      	ldr	r0, [r0, #0]
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	f000 f897 	bl	8006934 <_vfiprintf_r>
 8006806:	b002      	add	sp, #8
 8006808:	f85d eb04 	ldr.w	lr, [sp], #4
 800680c:	b003      	add	sp, #12
 800680e:	4770      	bx	lr
 8006810:	2000000c 	.word	0x2000000c

08006814 <__ascii_mbtowc>:
 8006814:	b082      	sub	sp, #8
 8006816:	b901      	cbnz	r1, 800681a <__ascii_mbtowc+0x6>
 8006818:	a901      	add	r1, sp, #4
 800681a:	b142      	cbz	r2, 800682e <__ascii_mbtowc+0x1a>
 800681c:	b14b      	cbz	r3, 8006832 <__ascii_mbtowc+0x1e>
 800681e:	7813      	ldrb	r3, [r2, #0]
 8006820:	600b      	str	r3, [r1, #0]
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	1e10      	subs	r0, r2, #0
 8006826:	bf18      	it	ne
 8006828:	2001      	movne	r0, #1
 800682a:	b002      	add	sp, #8
 800682c:	4770      	bx	lr
 800682e:	4610      	mov	r0, r2
 8006830:	e7fb      	b.n	800682a <__ascii_mbtowc+0x16>
 8006832:	f06f 0001 	mvn.w	r0, #1
 8006836:	e7f8      	b.n	800682a <__ascii_mbtowc+0x16>

08006838 <memmove>:
 8006838:	4288      	cmp	r0, r1
 800683a:	b510      	push	{r4, lr}
 800683c:	eb01 0402 	add.w	r4, r1, r2
 8006840:	d902      	bls.n	8006848 <memmove+0x10>
 8006842:	4284      	cmp	r4, r0
 8006844:	4623      	mov	r3, r4
 8006846:	d807      	bhi.n	8006858 <memmove+0x20>
 8006848:	1e43      	subs	r3, r0, #1
 800684a:	42a1      	cmp	r1, r4
 800684c:	d008      	beq.n	8006860 <memmove+0x28>
 800684e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006856:	e7f8      	b.n	800684a <memmove+0x12>
 8006858:	4402      	add	r2, r0
 800685a:	4601      	mov	r1, r0
 800685c:	428a      	cmp	r2, r1
 800685e:	d100      	bne.n	8006862 <memmove+0x2a>
 8006860:	bd10      	pop	{r4, pc}
 8006862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800686a:	e7f7      	b.n	800685c <memmove+0x24>

0800686c <__malloc_lock>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__malloc_lock+0x8>)
 800686e:	f000 bc1f 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	2000034c 	.word	0x2000034c

08006878 <__malloc_unlock>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__malloc_unlock+0x8>)
 800687a:	f000 bc1a 	b.w	80070b2 <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	2000034c 	.word	0x2000034c

08006884 <_realloc_r>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	4680      	mov	r8, r0
 800688a:	4614      	mov	r4, r2
 800688c:	460e      	mov	r6, r1
 800688e:	b921      	cbnz	r1, 800689a <_realloc_r+0x16>
 8006890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	4611      	mov	r1, r2
 8006896:	f7ff bdad 	b.w	80063f4 <_malloc_r>
 800689a:	b92a      	cbnz	r2, 80068a8 <_realloc_r+0x24>
 800689c:	f7ff fd3e 	bl	800631c <_free_r>
 80068a0:	4625      	mov	r5, r4
 80068a2:	4628      	mov	r0, r5
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	f000 fc6a 	bl	8007180 <_malloc_usable_size_r>
 80068ac:	4284      	cmp	r4, r0
 80068ae:	4607      	mov	r7, r0
 80068b0:	d802      	bhi.n	80068b8 <_realloc_r+0x34>
 80068b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068b6:	d812      	bhi.n	80068de <_realloc_r+0x5a>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4640      	mov	r0, r8
 80068bc:	f7ff fd9a 	bl	80063f4 <_malloc_r>
 80068c0:	4605      	mov	r5, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0ed      	beq.n	80068a2 <_realloc_r+0x1e>
 80068c6:	42bc      	cmp	r4, r7
 80068c8:	4622      	mov	r2, r4
 80068ca:	4631      	mov	r1, r6
 80068cc:	bf28      	it	cs
 80068ce:	463a      	movcs	r2, r7
 80068d0:	f7ff f97c 	bl	8005bcc <memcpy>
 80068d4:	4631      	mov	r1, r6
 80068d6:	4640      	mov	r0, r8
 80068d8:	f7ff fd20 	bl	800631c <_free_r>
 80068dc:	e7e1      	b.n	80068a2 <_realloc_r+0x1e>
 80068de:	4635      	mov	r5, r6
 80068e0:	e7df      	b.n	80068a2 <_realloc_r+0x1e>

080068e2 <__sfputc_r>:
 80068e2:	6893      	ldr	r3, [r2, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	b410      	push	{r4}
 80068ea:	6093      	str	r3, [r2, #8]
 80068ec:	da08      	bge.n	8006900 <__sfputc_r+0x1e>
 80068ee:	6994      	ldr	r4, [r2, #24]
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	db01      	blt.n	80068f8 <__sfputc_r+0x16>
 80068f4:	290a      	cmp	r1, #10
 80068f6:	d103      	bne.n	8006900 <__sfputc_r+0x1e>
 80068f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068fc:	f000 b94a 	b.w	8006b94 <__swbuf_r>
 8006900:	6813      	ldr	r3, [r2, #0]
 8006902:	1c58      	adds	r0, r3, #1
 8006904:	6010      	str	r0, [r2, #0]
 8006906:	7019      	strb	r1, [r3, #0]
 8006908:	4608      	mov	r0, r1
 800690a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690e:	4770      	bx	lr

08006910 <__sfputs_r>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	4606      	mov	r6, r0
 8006914:	460f      	mov	r7, r1
 8006916:	4614      	mov	r4, r2
 8006918:	18d5      	adds	r5, r2, r3
 800691a:	42ac      	cmp	r4, r5
 800691c:	d101      	bne.n	8006922 <__sfputs_r+0x12>
 800691e:	2000      	movs	r0, #0
 8006920:	e007      	b.n	8006932 <__sfputs_r+0x22>
 8006922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006926:	463a      	mov	r2, r7
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff ffda 	bl	80068e2 <__sfputc_r>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d1f3      	bne.n	800691a <__sfputs_r+0xa>
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006934 <_vfiprintf_r>:
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	460d      	mov	r5, r1
 800693a:	b09d      	sub	sp, #116	; 0x74
 800693c:	4614      	mov	r4, r2
 800693e:	4698      	mov	r8, r3
 8006940:	4606      	mov	r6, r0
 8006942:	b118      	cbz	r0, 800694c <_vfiprintf_r+0x18>
 8006944:	6983      	ldr	r3, [r0, #24]
 8006946:	b90b      	cbnz	r3, 800694c <_vfiprintf_r+0x18>
 8006948:	f000 fb14 	bl	8006f74 <__sinit>
 800694c:	4b89      	ldr	r3, [pc, #548]	; (8006b74 <_vfiprintf_r+0x240>)
 800694e:	429d      	cmp	r5, r3
 8006950:	d11b      	bne.n	800698a <_vfiprintf_r+0x56>
 8006952:	6875      	ldr	r5, [r6, #4]
 8006954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006956:	07d9      	lsls	r1, r3, #31
 8006958:	d405      	bmi.n	8006966 <_vfiprintf_r+0x32>
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	059a      	lsls	r2, r3, #22
 800695e:	d402      	bmi.n	8006966 <_vfiprintf_r+0x32>
 8006960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006962:	f000 fba5 	bl	80070b0 <__retarget_lock_acquire_recursive>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	071b      	lsls	r3, r3, #28
 800696a:	d501      	bpl.n	8006970 <_vfiprintf_r+0x3c>
 800696c:	692b      	ldr	r3, [r5, #16]
 800696e:	b9eb      	cbnz	r3, 80069ac <_vfiprintf_r+0x78>
 8006970:	4629      	mov	r1, r5
 8006972:	4630      	mov	r0, r6
 8006974:	f000 f96e 	bl	8006c54 <__swsetup_r>
 8006978:	b1c0      	cbz	r0, 80069ac <_vfiprintf_r+0x78>
 800697a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697c:	07dc      	lsls	r4, r3, #31
 800697e:	d50e      	bpl.n	800699e <_vfiprintf_r+0x6a>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	b01d      	add	sp, #116	; 0x74
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <_vfiprintf_r+0x244>)
 800698c:	429d      	cmp	r5, r3
 800698e:	d101      	bne.n	8006994 <_vfiprintf_r+0x60>
 8006990:	68b5      	ldr	r5, [r6, #8]
 8006992:	e7df      	b.n	8006954 <_vfiprintf_r+0x20>
 8006994:	4b79      	ldr	r3, [pc, #484]	; (8006b7c <_vfiprintf_r+0x248>)
 8006996:	429d      	cmp	r5, r3
 8006998:	bf08      	it	eq
 800699a:	68f5      	ldreq	r5, [r6, #12]
 800699c:	e7da      	b.n	8006954 <_vfiprintf_r+0x20>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	0598      	lsls	r0, r3, #22
 80069a2:	d4ed      	bmi.n	8006980 <_vfiprintf_r+0x4c>
 80069a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a6:	f000 fb84 	bl	80070b2 <__retarget_lock_release_recursive>
 80069aa:	e7e9      	b.n	8006980 <_vfiprintf_r+0x4c>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	2320      	movs	r3, #32
 80069b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ba:	2330      	movs	r3, #48	; 0x30
 80069bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b80 <_vfiprintf_r+0x24c>
 80069c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c4:	f04f 0901 	mov.w	r9, #1
 80069c8:	4623      	mov	r3, r4
 80069ca:	469a      	mov	sl, r3
 80069cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d0:	b10a      	cbz	r2, 80069d6 <_vfiprintf_r+0xa2>
 80069d2:	2a25      	cmp	r2, #37	; 0x25
 80069d4:	d1f9      	bne.n	80069ca <_vfiprintf_r+0x96>
 80069d6:	ebba 0b04 	subs.w	fp, sl, r4
 80069da:	d00b      	beq.n	80069f4 <_vfiprintf_r+0xc0>
 80069dc:	465b      	mov	r3, fp
 80069de:	4622      	mov	r2, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff94 	bl	8006910 <__sfputs_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	f000 80aa 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	445a      	add	r2, fp
 80069f2:	9209      	str	r2, [sp, #36]	; 0x24
 80069f4:	f89a 3000 	ldrb.w	r3, [sl]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a2 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a14:	931a      	str	r3, [sp, #104]	; 0x68
 8006a16:	4654      	mov	r4, sl
 8006a18:	2205      	movs	r2, #5
 8006a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1e:	4858      	ldr	r0, [pc, #352]	; (8006b80 <_vfiprintf_r+0x24c>)
 8006a20:	f7f9 fbe6 	bl	80001f0 <memchr>
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	b9d8      	cbnz	r0, 8006a60 <_vfiprintf_r+0x12c>
 8006a28:	06d1      	lsls	r1, r2, #27
 8006a2a:	bf44      	itt	mi
 8006a2c:	2320      	movmi	r3, #32
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a32:	0713      	lsls	r3, r2, #28
 8006a34:	bf44      	itt	mi
 8006a36:	232b      	movmi	r3, #43	; 0x2b
 8006a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a40:	2b2a      	cmp	r3, #42	; 0x2a
 8006a42:	d015      	beq.n	8006a70 <_vfiprintf_r+0x13c>
 8006a44:	9a07      	ldr	r2, [sp, #28]
 8006a46:	4654      	mov	r4, sl
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4621      	mov	r1, r4
 8006a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a54:	3b30      	subs	r3, #48	; 0x30
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d94e      	bls.n	8006af8 <_vfiprintf_r+0x1c4>
 8006a5a:	b1b0      	cbz	r0, 8006a8a <_vfiprintf_r+0x156>
 8006a5c:	9207      	str	r2, [sp, #28]
 8006a5e:	e014      	b.n	8006a8a <_vfiprintf_r+0x156>
 8006a60:	eba0 0308 	sub.w	r3, r0, r8
 8006a64:	fa09 f303 	lsl.w	r3, r9, r3
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	46a2      	mov	sl, r4
 8006a6e:	e7d2      	b.n	8006a16 <_vfiprintf_r+0xe2>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9103      	str	r1, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbb      	ittet	lt
 8006a7c:	425b      	neglt	r3, r3
 8006a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a82:	9307      	strge	r3, [sp, #28]
 8006a84:	9307      	strlt	r3, [sp, #28]
 8006a86:	bfb8      	it	lt
 8006a88:	9204      	strlt	r2, [sp, #16]
 8006a8a:	7823      	ldrb	r3, [r4, #0]
 8006a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8e:	d10c      	bne.n	8006aaa <_vfiprintf_r+0x176>
 8006a90:	7863      	ldrb	r3, [r4, #1]
 8006a92:	2b2a      	cmp	r3, #42	; 0x2a
 8006a94:	d135      	bne.n	8006b02 <_vfiprintf_r+0x1ce>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfb8      	it	lt
 8006aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aa6:	3402      	adds	r4, #2
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b90 <_vfiprintf_r+0x25c>
 8006aae:	7821      	ldrb	r1, [r4, #0]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	f7f9 fb9c 	bl	80001f0 <memchr>
 8006ab8:	b140      	cbz	r0, 8006acc <_vfiprintf_r+0x198>
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	eba0 000a 	sub.w	r0, r0, sl
 8006ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4303      	orrs	r3, r0
 8006ac8:	3401      	adds	r4, #1
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	482c      	ldr	r0, [pc, #176]	; (8006b84 <_vfiprintf_r+0x250>)
 8006ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad6:	2206      	movs	r2, #6
 8006ad8:	f7f9 fb8a 	bl	80001f0 <memchr>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d03f      	beq.n	8006b60 <_vfiprintf_r+0x22c>
 8006ae0:	4b29      	ldr	r3, [pc, #164]	; (8006b88 <_vfiprintf_r+0x254>)
 8006ae2:	bb1b      	cbnz	r3, 8006b2c <_vfiprintf_r+0x1f8>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	f023 0307 	bic.w	r3, r3, #7
 8006aec:	3308      	adds	r3, #8
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	443b      	add	r3, r7
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	e767      	b.n	80069c8 <_vfiprintf_r+0x94>
 8006af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006afc:	460c      	mov	r4, r1
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7a5      	b.n	8006a4e <_vfiprintf_r+0x11a>
 8006b02:	2300      	movs	r3, #0
 8006b04:	3401      	adds	r4, #1
 8006b06:	9305      	str	r3, [sp, #20]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f04f 0c0a 	mov.w	ip, #10
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b14:	3a30      	subs	r2, #48	; 0x30
 8006b16:	2a09      	cmp	r2, #9
 8006b18:	d903      	bls.n	8006b22 <_vfiprintf_r+0x1ee>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c5      	beq.n	8006aaa <_vfiprintf_r+0x176>
 8006b1e:	9105      	str	r1, [sp, #20]
 8006b20:	e7c3      	b.n	8006aaa <_vfiprintf_r+0x176>
 8006b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b26:	4604      	mov	r4, r0
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e7f0      	b.n	8006b0e <_vfiprintf_r+0x1da>
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7fd fdd8 	bl	80046ec <_printf_float>
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	1c78      	adds	r0, r7, #1
 8006b40:	d1d6      	bne.n	8006af0 <_vfiprintf_r+0x1bc>
 8006b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b44:	07d9      	lsls	r1, r3, #31
 8006b46:	d405      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b48:	89ab      	ldrh	r3, [r5, #12]
 8006b4a:	059a      	lsls	r2, r3, #22
 8006b4c:	d402      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b50:	f000 faaf 	bl	80070b2 <__retarget_lock_release_recursive>
 8006b54:	89ab      	ldrh	r3, [r5, #12]
 8006b56:	065b      	lsls	r3, r3, #25
 8006b58:	f53f af12 	bmi.w	8006980 <_vfiprintf_r+0x4c>
 8006b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5e:	e711      	b.n	8006984 <_vfiprintf_r+0x50>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7fe f862 	bl	8004c34 <_printf_i>
 8006b70:	e7e4      	b.n	8006b3c <_vfiprintf_r+0x208>
 8006b72:	bf00      	nop
 8006b74:	0800774c 	.word	0x0800774c
 8006b78:	0800776c 	.word	0x0800776c
 8006b7c:	0800772c 	.word	0x0800772c
 8006b80:	080075d4 	.word	0x080075d4
 8006b84:	080075de 	.word	0x080075de
 8006b88:	080046ed 	.word	0x080046ed
 8006b8c:	08006911 	.word	0x08006911
 8006b90:	080075da 	.word	0x080075da

08006b94 <__swbuf_r>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	460e      	mov	r6, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	b118      	cbz	r0, 8006ba6 <__swbuf_r+0x12>
 8006b9e:	6983      	ldr	r3, [r0, #24]
 8006ba0:	b90b      	cbnz	r3, 8006ba6 <__swbuf_r+0x12>
 8006ba2:	f000 f9e7 	bl	8006f74 <__sinit>
 8006ba6:	4b21      	ldr	r3, [pc, #132]	; (8006c2c <__swbuf_r+0x98>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d12b      	bne.n	8006c04 <__swbuf_r+0x70>
 8006bac:	686c      	ldr	r4, [r5, #4]
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	071a      	lsls	r2, r3, #28
 8006bb6:	d52f      	bpl.n	8006c18 <__swbuf_r+0x84>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	b36b      	cbz	r3, 8006c18 <__swbuf_r+0x84>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	1ac0      	subs	r0, r0, r3
 8006bc2:	6963      	ldr	r3, [r4, #20]
 8006bc4:	b2f6      	uxtb	r6, r6
 8006bc6:	4283      	cmp	r3, r0
 8006bc8:	4637      	mov	r7, r6
 8006bca:	dc04      	bgt.n	8006bd6 <__swbuf_r+0x42>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f93c 	bl	8006e4c <_fflush_r>
 8006bd4:	bb30      	cbnz	r0, 8006c24 <__swbuf_r+0x90>
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	701e      	strb	r6, [r3, #0]
 8006be4:	6963      	ldr	r3, [r4, #20]
 8006be6:	3001      	adds	r0, #1
 8006be8:	4283      	cmp	r3, r0
 8006bea:	d004      	beq.n	8006bf6 <__swbuf_r+0x62>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	07db      	lsls	r3, r3, #31
 8006bf0:	d506      	bpl.n	8006c00 <__swbuf_r+0x6c>
 8006bf2:	2e0a      	cmp	r6, #10
 8006bf4:	d104      	bne.n	8006c00 <__swbuf_r+0x6c>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f927 	bl	8006e4c <_fflush_r>
 8006bfe:	b988      	cbnz	r0, 8006c24 <__swbuf_r+0x90>
 8006c00:	4638      	mov	r0, r7
 8006c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <__swbuf_r+0x9c>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d101      	bne.n	8006c0e <__swbuf_r+0x7a>
 8006c0a:	68ac      	ldr	r4, [r5, #8]
 8006c0c:	e7cf      	b.n	8006bae <__swbuf_r+0x1a>
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <__swbuf_r+0xa0>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	bf08      	it	eq
 8006c14:	68ec      	ldreq	r4, [r5, #12]
 8006c16:	e7ca      	b.n	8006bae <__swbuf_r+0x1a>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f81a 	bl	8006c54 <__swsetup_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0cb      	beq.n	8006bbc <__swbuf_r+0x28>
 8006c24:	f04f 37ff 	mov.w	r7, #4294967295
 8006c28:	e7ea      	b.n	8006c00 <__swbuf_r+0x6c>
 8006c2a:	bf00      	nop
 8006c2c:	0800774c 	.word	0x0800774c
 8006c30:	0800776c 	.word	0x0800776c
 8006c34:	0800772c 	.word	0x0800772c

08006c38 <__ascii_wctomb>:
 8006c38:	b149      	cbz	r1, 8006c4e <__ascii_wctomb+0x16>
 8006c3a:	2aff      	cmp	r2, #255	; 0xff
 8006c3c:	bf85      	ittet	hi
 8006c3e:	238a      	movhi	r3, #138	; 0x8a
 8006c40:	6003      	strhi	r3, [r0, #0]
 8006c42:	700a      	strbls	r2, [r1, #0]
 8006c44:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c48:	bf98      	it	ls
 8006c4a:	2001      	movls	r0, #1
 8006c4c:	4770      	bx	lr
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4770      	bx	lr
	...

08006c54 <__swsetup_r>:
 8006c54:	4b32      	ldr	r3, [pc, #200]	; (8006d20 <__swsetup_r+0xcc>)
 8006c56:	b570      	push	{r4, r5, r6, lr}
 8006c58:	681d      	ldr	r5, [r3, #0]
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	b125      	cbz	r5, 8006c6a <__swsetup_r+0x16>
 8006c60:	69ab      	ldr	r3, [r5, #24]
 8006c62:	b913      	cbnz	r3, 8006c6a <__swsetup_r+0x16>
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 f985 	bl	8006f74 <__sinit>
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <__swsetup_r+0xd0>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d10f      	bne.n	8006c90 <__swsetup_r+0x3c>
 8006c70:	686c      	ldr	r4, [r5, #4]
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c78:	0719      	lsls	r1, r3, #28
 8006c7a:	d42c      	bmi.n	8006cd6 <__swsetup_r+0x82>
 8006c7c:	06dd      	lsls	r5, r3, #27
 8006c7e:	d411      	bmi.n	8006ca4 <__swsetup_r+0x50>
 8006c80:	2309      	movs	r3, #9
 8006c82:	6033      	str	r3, [r6, #0]
 8006c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e03e      	b.n	8006d0e <__swsetup_r+0xba>
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <__swsetup_r+0xd4>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d101      	bne.n	8006c9a <__swsetup_r+0x46>
 8006c96:	68ac      	ldr	r4, [r5, #8]
 8006c98:	e7eb      	b.n	8006c72 <__swsetup_r+0x1e>
 8006c9a:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <__swsetup_r+0xd8>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	bf08      	it	eq
 8006ca0:	68ec      	ldreq	r4, [r5, #12]
 8006ca2:	e7e6      	b.n	8006c72 <__swsetup_r+0x1e>
 8006ca4:	0758      	lsls	r0, r3, #29
 8006ca6:	d512      	bpl.n	8006cce <__swsetup_r+0x7a>
 8006ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006caa:	b141      	cbz	r1, 8006cbe <__swsetup_r+0x6a>
 8006cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d002      	beq.n	8006cba <__swsetup_r+0x66>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff fb31 	bl	800631c <_free_r>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6063      	str	r3, [r4, #4]
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f043 0308 	orr.w	r3, r3, #8
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	b94b      	cbnz	r3, 8006cee <__swsetup_r+0x9a>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce4:	d003      	beq.n	8006cee <__swsetup_r+0x9a>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 fa09 	bl	8007100 <__smakebuf_r>
 8006cee:	89a0      	ldrh	r0, [r4, #12]
 8006cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf4:	f010 0301 	ands.w	r3, r0, #1
 8006cf8:	d00a      	beq.n	8006d10 <__swsetup_r+0xbc>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6963      	ldr	r3, [r4, #20]
 8006d00:	425b      	negs	r3, r3
 8006d02:	61a3      	str	r3, [r4, #24]
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	b943      	cbnz	r3, 8006d1a <__swsetup_r+0xc6>
 8006d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d0c:	d1ba      	bne.n	8006c84 <__swsetup_r+0x30>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	0781      	lsls	r1, r0, #30
 8006d12:	bf58      	it	pl
 8006d14:	6963      	ldrpl	r3, [r4, #20]
 8006d16:	60a3      	str	r3, [r4, #8]
 8006d18:	e7f4      	b.n	8006d04 <__swsetup_r+0xb0>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e7f7      	b.n	8006d0e <__swsetup_r+0xba>
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c
 8006d24:	0800774c 	.word	0x0800774c
 8006d28:	0800776c 	.word	0x0800776c
 8006d2c:	0800772c 	.word	0x0800772c

08006d30 <abort>:
 8006d30:	b508      	push	{r3, lr}
 8006d32:	2006      	movs	r0, #6
 8006d34:	f000 fa54 	bl	80071e0 <raise>
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7fa fc4f 	bl	80015dc <_exit>
	...

08006d40 <__sflush_r>:
 8006d40:	898a      	ldrh	r2, [r1, #12]
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	4605      	mov	r5, r0
 8006d48:	0710      	lsls	r0, r2, #28
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	d458      	bmi.n	8006e00 <__sflush_r+0xc0>
 8006d4e:	684b      	ldr	r3, [r1, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dc05      	bgt.n	8006d60 <__sflush_r+0x20>
 8006d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dc02      	bgt.n	8006d60 <__sflush_r+0x20>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d0f9      	beq.n	8006d5a <__sflush_r+0x1a>
 8006d66:	2300      	movs	r3, #0
 8006d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d6c:	682f      	ldr	r7, [r5, #0]
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	d032      	beq.n	8006dd8 <__sflush_r+0x98>
 8006d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	075a      	lsls	r2, r3, #29
 8006d78:	d505      	bpl.n	8006d86 <__sflush_r+0x46>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	1ac0      	subs	r0, r0, r3
 8006d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d80:	b10b      	cbz	r3, 8006d86 <__sflush_r+0x46>
 8006d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d84:	1ac0      	subs	r0, r0, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8c:	6a21      	ldr	r1, [r4, #32]
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b0      	blx	r6
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	d106      	bne.n	8006da6 <__sflush_r+0x66>
 8006d98:	6829      	ldr	r1, [r5, #0]
 8006d9a:	291d      	cmp	r1, #29
 8006d9c:	d82c      	bhi.n	8006df8 <__sflush_r+0xb8>
 8006d9e:	4a2a      	ldr	r2, [pc, #168]	; (8006e48 <__sflush_r+0x108>)
 8006da0:	40ca      	lsrs	r2, r1
 8006da2:	07d6      	lsls	r6, r2, #31
 8006da4:	d528      	bpl.n	8006df8 <__sflush_r+0xb8>
 8006da6:	2200      	movs	r2, #0
 8006da8:	6062      	str	r2, [r4, #4]
 8006daa:	04d9      	lsls	r1, r3, #19
 8006dac:	6922      	ldr	r2, [r4, #16]
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	d504      	bpl.n	8006dbc <__sflush_r+0x7c>
 8006db2:	1c42      	adds	r2, r0, #1
 8006db4:	d101      	bne.n	8006dba <__sflush_r+0x7a>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	b903      	cbnz	r3, 8006dbc <__sflush_r+0x7c>
 8006dba:	6560      	str	r0, [r4, #84]	; 0x54
 8006dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dbe:	602f      	str	r7, [r5, #0]
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	d0ca      	beq.n	8006d5a <__sflush_r+0x1a>
 8006dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	d002      	beq.n	8006dd2 <__sflush_r+0x92>
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f7ff faa5 	bl	800631c <_free_r>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8006dd6:	e7c1      	b.n	8006d5c <__sflush_r+0x1c>
 8006dd8:	6a21      	ldr	r1, [r4, #32]
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b0      	blx	r6
 8006de0:	1c41      	adds	r1, r0, #1
 8006de2:	d1c7      	bne.n	8006d74 <__sflush_r+0x34>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0c4      	beq.n	8006d74 <__sflush_r+0x34>
 8006dea:	2b1d      	cmp	r3, #29
 8006dec:	d001      	beq.n	8006df2 <__sflush_r+0xb2>
 8006dee:	2b16      	cmp	r3, #22
 8006df0:	d101      	bne.n	8006df6 <__sflush_r+0xb6>
 8006df2:	602f      	str	r7, [r5, #0]
 8006df4:	e7b1      	b.n	8006d5a <__sflush_r+0x1a>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	e7ad      	b.n	8006d5c <__sflush_r+0x1c>
 8006e00:	690f      	ldr	r7, [r1, #16]
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	d0a9      	beq.n	8006d5a <__sflush_r+0x1a>
 8006e06:	0793      	lsls	r3, r2, #30
 8006e08:	680e      	ldr	r6, [r1, #0]
 8006e0a:	bf08      	it	eq
 8006e0c:	694b      	ldreq	r3, [r1, #20]
 8006e0e:	600f      	str	r7, [r1, #0]
 8006e10:	bf18      	it	ne
 8006e12:	2300      	movne	r3, #0
 8006e14:	eba6 0807 	sub.w	r8, r6, r7
 8006e18:	608b      	str	r3, [r1, #8]
 8006e1a:	f1b8 0f00 	cmp.w	r8, #0
 8006e1e:	dd9c      	ble.n	8006d5a <__sflush_r+0x1a>
 8006e20:	6a21      	ldr	r1, [r4, #32]
 8006e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e24:	4643      	mov	r3, r8
 8006e26:	463a      	mov	r2, r7
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b0      	blx	r6
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dc06      	bgt.n	8006e3e <__sflush_r+0xfe>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	e78e      	b.n	8006d5c <__sflush_r+0x1c>
 8006e3e:	4407      	add	r7, r0
 8006e40:	eba8 0800 	sub.w	r8, r8, r0
 8006e44:	e7e9      	b.n	8006e1a <__sflush_r+0xda>
 8006e46:	bf00      	nop
 8006e48:	20400001 	.word	0x20400001

08006e4c <_fflush_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	4605      	mov	r5, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	b913      	cbnz	r3, 8006e5c <_fflush_r+0x10>
 8006e56:	2500      	movs	r5, #0
 8006e58:	4628      	mov	r0, r5
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	b118      	cbz	r0, 8006e66 <_fflush_r+0x1a>
 8006e5e:	6983      	ldr	r3, [r0, #24]
 8006e60:	b90b      	cbnz	r3, 8006e66 <_fflush_r+0x1a>
 8006e62:	f000 f887 	bl	8006f74 <__sinit>
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <_fflush_r+0x6c>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d11b      	bne.n	8006ea4 <_fflush_r+0x58>
 8006e6c:	686c      	ldr	r4, [r5, #4]
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0ef      	beq.n	8006e56 <_fflush_r+0xa>
 8006e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d404      	bmi.n	8006e86 <_fflush_r+0x3a>
 8006e7c:	0599      	lsls	r1, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_fflush_r+0x3a>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f000 f915 	bl	80070b0 <__retarget_lock_acquire_recursive>
 8006e86:	4628      	mov	r0, r5
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f7ff ff59 	bl	8006d40 <__sflush_r>
 8006e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e90:	07da      	lsls	r2, r3, #31
 8006e92:	4605      	mov	r5, r0
 8006e94:	d4e0      	bmi.n	8006e58 <_fflush_r+0xc>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	059b      	lsls	r3, r3, #22
 8006e9a:	d4dd      	bmi.n	8006e58 <_fflush_r+0xc>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9e:	f000 f908 	bl	80070b2 <__retarget_lock_release_recursive>
 8006ea2:	e7d9      	b.n	8006e58 <_fflush_r+0xc>
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <_fflush_r+0x70>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d101      	bne.n	8006eae <_fflush_r+0x62>
 8006eaa:	68ac      	ldr	r4, [r5, #8]
 8006eac:	e7df      	b.n	8006e6e <_fflush_r+0x22>
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <_fflush_r+0x74>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	bf08      	it	eq
 8006eb4:	68ec      	ldreq	r4, [r5, #12]
 8006eb6:	e7da      	b.n	8006e6e <_fflush_r+0x22>
 8006eb8:	0800774c 	.word	0x0800774c
 8006ebc:	0800776c 	.word	0x0800776c
 8006ec0:	0800772c 	.word	0x0800772c

08006ec4 <std>:
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	4604      	mov	r4, r0
 8006eca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ed2:	6083      	str	r3, [r0, #8]
 8006ed4:	8181      	strh	r1, [r0, #12]
 8006ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ed8:	81c2      	strh	r2, [r0, #14]
 8006eda:	6183      	str	r3, [r0, #24]
 8006edc:	4619      	mov	r1, r3
 8006ede:	2208      	movs	r2, #8
 8006ee0:	305c      	adds	r0, #92	; 0x5c
 8006ee2:	f7fd fb5b 	bl	800459c <memset>
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <std+0x38>)
 8006ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <std+0x3c>)
 8006eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <std+0x40>)
 8006ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <std+0x44>)
 8006ef4:	6224      	str	r4, [r4, #32]
 8006ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	bf00      	nop
 8006efc:	08007219 	.word	0x08007219
 8006f00:	0800723b 	.word	0x0800723b
 8006f04:	08007273 	.word	0x08007273
 8006f08:	08007297 	.word	0x08007297

08006f0c <_cleanup_r>:
 8006f0c:	4901      	ldr	r1, [pc, #4]	; (8006f14 <_cleanup_r+0x8>)
 8006f0e:	f000 b8af 	b.w	8007070 <_fwalk_reent>
 8006f12:	bf00      	nop
 8006f14:	08006e4d 	.word	0x08006e4d

08006f18 <__sfmoreglue>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	2268      	movs	r2, #104	; 0x68
 8006f1c:	1e4d      	subs	r5, r1, #1
 8006f1e:	4355      	muls	r5, r2
 8006f20:	460e      	mov	r6, r1
 8006f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f26:	f7ff fa65 	bl	80063f4 <_malloc_r>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	b140      	cbz	r0, 8006f40 <__sfmoreglue+0x28>
 8006f2e:	2100      	movs	r1, #0
 8006f30:	e9c0 1600 	strd	r1, r6, [r0]
 8006f34:	300c      	adds	r0, #12
 8006f36:	60a0      	str	r0, [r4, #8]
 8006f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f3c:	f7fd fb2e 	bl	800459c <memset>
 8006f40:	4620      	mov	r0, r4
 8006f42:	bd70      	pop	{r4, r5, r6, pc}

08006f44 <__sfp_lock_acquire>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__sfp_lock_acquire+0x8>)
 8006f46:	f000 b8b3 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	2000034d 	.word	0x2000034d

08006f50 <__sfp_lock_release>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__sfp_lock_release+0x8>)
 8006f52:	f000 b8ae 	b.w	80070b2 <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	2000034d 	.word	0x2000034d

08006f5c <__sinit_lock_acquire>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__sinit_lock_acquire+0x8>)
 8006f5e:	f000 b8a7 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	2000034e 	.word	0x2000034e

08006f68 <__sinit_lock_release>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__sinit_lock_release+0x8>)
 8006f6a:	f000 b8a2 	b.w	80070b2 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	2000034e 	.word	0x2000034e

08006f74 <__sinit>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	4604      	mov	r4, r0
 8006f78:	f7ff fff0 	bl	8006f5c <__sinit_lock_acquire>
 8006f7c:	69a3      	ldr	r3, [r4, #24]
 8006f7e:	b11b      	cbz	r3, 8006f88 <__sinit+0x14>
 8006f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f84:	f7ff bff0 	b.w	8006f68 <__sinit_lock_release>
 8006f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <__sinit+0x68>)
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <__sinit+0x6c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	bf04      	itt	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	61a3      	streq	r3, [r4, #24]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f820 	bl	8006fe4 <__sfp>
 8006fa4:	6060      	str	r0, [r4, #4]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f81c 	bl	8006fe4 <__sfp>
 8006fac:	60a0      	str	r0, [r4, #8]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f818 	bl	8006fe4 <__sfp>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	60e0      	str	r0, [r4, #12]
 8006fb8:	2104      	movs	r1, #4
 8006fba:	6860      	ldr	r0, [r4, #4]
 8006fbc:	f7ff ff82 	bl	8006ec4 <std>
 8006fc0:	68a0      	ldr	r0, [r4, #8]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	2109      	movs	r1, #9
 8006fc6:	f7ff ff7d 	bl	8006ec4 <std>
 8006fca:	68e0      	ldr	r0, [r4, #12]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	2112      	movs	r1, #18
 8006fd0:	f7ff ff78 	bl	8006ec4 <std>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	e7d2      	b.n	8006f80 <__sinit+0xc>
 8006fda:	bf00      	nop
 8006fdc:	080073b0 	.word	0x080073b0
 8006fe0:	08006f0d 	.word	0x08006f0d

08006fe4 <__sfp>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f7ff ffac 	bl	8006f44 <__sfp_lock_acquire>
 8006fec:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <__sfp+0x84>)
 8006fee:	681e      	ldr	r6, [r3, #0]
 8006ff0:	69b3      	ldr	r3, [r6, #24]
 8006ff2:	b913      	cbnz	r3, 8006ffa <__sfp+0x16>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff ffbd 	bl	8006f74 <__sinit>
 8006ffa:	3648      	adds	r6, #72	; 0x48
 8006ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007000:	3b01      	subs	r3, #1
 8007002:	d503      	bpl.n	800700c <__sfp+0x28>
 8007004:	6833      	ldr	r3, [r6, #0]
 8007006:	b30b      	cbz	r3, 800704c <__sfp+0x68>
 8007008:	6836      	ldr	r6, [r6, #0]
 800700a:	e7f7      	b.n	8006ffc <__sfp+0x18>
 800700c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007010:	b9d5      	cbnz	r5, 8007048 <__sfp+0x64>
 8007012:	4b16      	ldr	r3, [pc, #88]	; (800706c <__sfp+0x88>)
 8007014:	60e3      	str	r3, [r4, #12]
 8007016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800701a:	6665      	str	r5, [r4, #100]	; 0x64
 800701c:	f000 f847 	bl	80070ae <__retarget_lock_init_recursive>
 8007020:	f7ff ff96 	bl	8006f50 <__sfp_lock_release>
 8007024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800702c:	6025      	str	r5, [r4, #0]
 800702e:	61a5      	str	r5, [r4, #24]
 8007030:	2208      	movs	r2, #8
 8007032:	4629      	mov	r1, r5
 8007034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007038:	f7fd fab0 	bl	800459c <memset>
 800703c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007044:	4620      	mov	r0, r4
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007048:	3468      	adds	r4, #104	; 0x68
 800704a:	e7d9      	b.n	8007000 <__sfp+0x1c>
 800704c:	2104      	movs	r1, #4
 800704e:	4638      	mov	r0, r7
 8007050:	f7ff ff62 	bl	8006f18 <__sfmoreglue>
 8007054:	4604      	mov	r4, r0
 8007056:	6030      	str	r0, [r6, #0]
 8007058:	2800      	cmp	r0, #0
 800705a:	d1d5      	bne.n	8007008 <__sfp+0x24>
 800705c:	f7ff ff78 	bl	8006f50 <__sfp_lock_release>
 8007060:	230c      	movs	r3, #12
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	e7ee      	b.n	8007044 <__sfp+0x60>
 8007066:	bf00      	nop
 8007068:	080073b0 	.word	0x080073b0
 800706c:	ffff0001 	.word	0xffff0001

08007070 <_fwalk_reent>:
 8007070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007074:	4606      	mov	r6, r0
 8007076:	4688      	mov	r8, r1
 8007078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800707c:	2700      	movs	r7, #0
 800707e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007082:	f1b9 0901 	subs.w	r9, r9, #1
 8007086:	d505      	bpl.n	8007094 <_fwalk_reent+0x24>
 8007088:	6824      	ldr	r4, [r4, #0]
 800708a:	2c00      	cmp	r4, #0
 800708c:	d1f7      	bne.n	800707e <_fwalk_reent+0xe>
 800708e:	4638      	mov	r0, r7
 8007090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007094:	89ab      	ldrh	r3, [r5, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d907      	bls.n	80070aa <_fwalk_reent+0x3a>
 800709a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800709e:	3301      	adds	r3, #1
 80070a0:	d003      	beq.n	80070aa <_fwalk_reent+0x3a>
 80070a2:	4629      	mov	r1, r5
 80070a4:	4630      	mov	r0, r6
 80070a6:	47c0      	blx	r8
 80070a8:	4307      	orrs	r7, r0
 80070aa:	3568      	adds	r5, #104	; 0x68
 80070ac:	e7e9      	b.n	8007082 <_fwalk_reent+0x12>

080070ae <__retarget_lock_init_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <__retarget_lock_acquire_recursive>:
 80070b0:	4770      	bx	lr

080070b2 <__retarget_lock_release_recursive>:
 80070b2:	4770      	bx	lr

080070b4 <__swhatbuf_r>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	460e      	mov	r6, r1
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2900      	cmp	r1, #0
 80070be:	b096      	sub	sp, #88	; 0x58
 80070c0:	4614      	mov	r4, r2
 80070c2:	461d      	mov	r5, r3
 80070c4:	da08      	bge.n	80070d8 <__swhatbuf_r+0x24>
 80070c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	061a      	lsls	r2, r3, #24
 80070d0:	d410      	bmi.n	80070f4 <__swhatbuf_r+0x40>
 80070d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d6:	e00e      	b.n	80070f6 <__swhatbuf_r+0x42>
 80070d8:	466a      	mov	r2, sp
 80070da:	f000 f903 	bl	80072e4 <_fstat_r>
 80070de:	2800      	cmp	r0, #0
 80070e0:	dbf1      	blt.n	80070c6 <__swhatbuf_r+0x12>
 80070e2:	9a01      	ldr	r2, [sp, #4]
 80070e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070ec:	425a      	negs	r2, r3
 80070ee:	415a      	adcs	r2, r3
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	e7ee      	b.n	80070d2 <__swhatbuf_r+0x1e>
 80070f4:	2340      	movs	r3, #64	; 0x40
 80070f6:	2000      	movs	r0, #0
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	b016      	add	sp, #88	; 0x58
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007100 <__smakebuf_r>:
 8007100:	898b      	ldrh	r3, [r1, #12]
 8007102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007104:	079d      	lsls	r5, r3, #30
 8007106:	4606      	mov	r6, r0
 8007108:	460c      	mov	r4, r1
 800710a:	d507      	bpl.n	800711c <__smakebuf_r+0x1c>
 800710c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	2301      	movs	r3, #1
 8007116:	6163      	str	r3, [r4, #20]
 8007118:	b002      	add	sp, #8
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	ab01      	add	r3, sp, #4
 800711e:	466a      	mov	r2, sp
 8007120:	f7ff ffc8 	bl	80070b4 <__swhatbuf_r>
 8007124:	9900      	ldr	r1, [sp, #0]
 8007126:	4605      	mov	r5, r0
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff f963 	bl	80063f4 <_malloc_r>
 800712e:	b948      	cbnz	r0, 8007144 <__smakebuf_r+0x44>
 8007130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007134:	059a      	lsls	r2, r3, #22
 8007136:	d4ef      	bmi.n	8007118 <__smakebuf_r+0x18>
 8007138:	f023 0303 	bic.w	r3, r3, #3
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	e7e3      	b.n	800710c <__smakebuf_r+0xc>
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <__smakebuf_r+0x7c>)
 8007146:	62b3      	str	r3, [r6, #40]	; 0x28
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	6020      	str	r0, [r4, #0]
 800714c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	9b00      	ldr	r3, [sp, #0]
 8007154:	6163      	str	r3, [r4, #20]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	6120      	str	r0, [r4, #16]
 800715a:	b15b      	cbz	r3, 8007174 <__smakebuf_r+0x74>
 800715c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007160:	4630      	mov	r0, r6
 8007162:	f000 f8d1 	bl	8007308 <_isatty_r>
 8007166:	b128      	cbz	r0, 8007174 <__smakebuf_r+0x74>
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	89a0      	ldrh	r0, [r4, #12]
 8007176:	4305      	orrs	r5, r0
 8007178:	81a5      	strh	r5, [r4, #12]
 800717a:	e7cd      	b.n	8007118 <__smakebuf_r+0x18>
 800717c:	08006f0d 	.word	0x08006f0d

08007180 <_malloc_usable_size_r>:
 8007180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007184:	1f18      	subs	r0, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfbc      	itt	lt
 800718a:	580b      	ldrlt	r3, [r1, r0]
 800718c:	18c0      	addlt	r0, r0, r3
 800718e:	4770      	bx	lr

08007190 <_raise_r>:
 8007190:	291f      	cmp	r1, #31
 8007192:	b538      	push	{r3, r4, r5, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	d904      	bls.n	80071a4 <_raise_r+0x14>
 800719a:	2316      	movs	r3, #22
 800719c:	6003      	str	r3, [r0, #0]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071a6:	b112      	cbz	r2, 80071ae <_raise_r+0x1e>
 80071a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ac:	b94b      	cbnz	r3, 80071c2 <_raise_r+0x32>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f830 	bl	8007214 <_getpid_r>
 80071b4:	462a      	mov	r2, r5
 80071b6:	4601      	mov	r1, r0
 80071b8:	4620      	mov	r0, r4
 80071ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071be:	f000 b817 	b.w	80071f0 <_kill_r>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d00a      	beq.n	80071dc <_raise_r+0x4c>
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	d103      	bne.n	80071d2 <_raise_r+0x42>
 80071ca:	2316      	movs	r3, #22
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7e7      	b.n	80071a2 <_raise_r+0x12>
 80071d2:	2400      	movs	r4, #0
 80071d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071d8:	4628      	mov	r0, r5
 80071da:	4798      	blx	r3
 80071dc:	2000      	movs	r0, #0
 80071de:	e7e0      	b.n	80071a2 <_raise_r+0x12>

080071e0 <raise>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <raise+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f7ff bfd3 	b.w	8007190 <_raise_r>
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <_kill_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	; (8007210 <_kill_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7fa f9dd 	bl	80015bc <_kill>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_kill_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_kill_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	20000348 	.word	0x20000348

08007214 <_getpid_r>:
 8007214:	f7fa b9ca 	b.w	80015ac <_getpid>

08007218 <__sread>:
 8007218:	b510      	push	{r4, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	f000 f894 	bl	800734c <_read_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	bfab      	itete	ge
 8007228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800722a:	89a3      	ldrhlt	r3, [r4, #12]
 800722c:	181b      	addge	r3, r3, r0
 800722e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007232:	bfac      	ite	ge
 8007234:	6563      	strge	r3, [r4, #84]	; 0x54
 8007236:	81a3      	strhlt	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__swrite>:
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	461f      	mov	r7, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	05db      	lsls	r3, r3, #23
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4616      	mov	r6, r2
 800724a:	d505      	bpl.n	8007258 <__swrite+0x1e>
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	f000 f868 	bl	8007328 <_lseek_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	f000 b817 	b.w	80072a0 <_write_r>

08007272 <__sseek>:
 8007272:	b510      	push	{r4, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 f855 	bl	8007328 <_lseek_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	bf15      	itete	ne
 8007284:	6560      	strne	r0, [r4, #84]	; 0x54
 8007286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800728a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800728e:	81a3      	strheq	r3, [r4, #12]
 8007290:	bf18      	it	ne
 8007292:	81a3      	strhne	r3, [r4, #12]
 8007294:	bd10      	pop	{r4, pc}

08007296 <__sclose>:
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 b813 	b.w	80072c4 <_close_r>
	...

080072a0 <_write_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	; (80072c0 <_write_r+0x20>)
 80072a4:	4604      	mov	r4, r0
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7fa f9bb 	bl	800162a <_write>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_write_r+0x1e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_write_r+0x1e>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20000348 	.word	0x20000348

080072c4 <_close_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d06      	ldr	r5, [pc, #24]	; (80072e0 <_close_r+0x1c>)
 80072c8:	2300      	movs	r3, #0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	f7fa f9c7 	bl	8001662 <_close>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_close_r+0x1a>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_close_r+0x1a>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	20000348 	.word	0x20000348

080072e4 <_fstat_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4d07      	ldr	r5, [pc, #28]	; (8007304 <_fstat_r+0x20>)
 80072e8:	2300      	movs	r3, #0
 80072ea:	4604      	mov	r4, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f7fa f9c2 	bl	800167a <_fstat>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d102      	bne.n	8007300 <_fstat_r+0x1c>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	b103      	cbz	r3, 8007300 <_fstat_r+0x1c>
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	bd38      	pop	{r3, r4, r5, pc}
 8007302:	bf00      	nop
 8007304:	20000348 	.word	0x20000348

08007308 <_isatty_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d06      	ldr	r5, [pc, #24]	; (8007324 <_isatty_r+0x1c>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	f7fa f9c1 	bl	800169a <_isatty>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_isatty_r+0x1a>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_isatty_r+0x1a>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	20000348 	.word	0x20000348

08007328 <_lseek_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	; (8007348 <_lseek_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7fa f9ba 	bl	80016b0 <_lseek>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_lseek_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_lseek_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20000348 	.word	0x20000348

0800734c <_read_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_read_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7fa f948 	bl	80015f0 <_read>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_read_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_read_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000348 	.word	0x20000348

08007370 <_init>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

0800737c <_fini>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr
